<assembly n="GreenZoneParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null">
	<type n="TSettings" ns="GreenZoneParser.Properties" id="33554434" mod="e" t="cl">
		<attrs>
			<attr t="aSystem.CodeDom.Compiler.GeneratedCodeAttribute" constr="100667702">
				<args>
					<arg t="X" v="Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator"/>
					<arg t="X" v="10.0.0.0"/>
				</args>
			</attr>
			<attr t="aSystem.Runtime.CompilerServices.CompilerGeneratedAttribute" constr="100680591">
			</attr>
		</attrs>
		<base-t n="TSystem.Configuration.ApplicationSettingsBase" id="33556288"/>
		<field n="defaultInstance" id="67108865" t="TGreenZoneParser.Properties.Settings" mod="s0">
		</field>
		<constr id="100663298" mod="P">
		</constr>
		<constr id="100663299" mod="s0">
		</constr>
		<prop n="Default" id="385875969" t="TGreenZoneParser.Properties.Settings" r="True" w="False" mod="sP">
		</prop>
	</type>
	<type n="TResources" ns="GreenZoneParser.Properties" id="33554435" mod="" t="cl">
		<attrs>
			<attr t="aSystem.Diagnostics.DebuggerNonUserCodeAttribute" constr="100672426">
			</attr>
			<attr t="aSystem.CodeDom.Compiler.GeneratedCodeAttribute" constr="100667702">
				<args>
					<arg t="X" v="System.Resources.Tools.StronglyTypedResourceBuilder"/>
					<arg t="X" v="4.0.0.0"/>
				</args>
			</attr>
			<attr t="aSystem.Runtime.CompilerServices.CompilerGeneratedAttribute" constr="100680591">
			</attr>
		</attrs>
		<field n="resourceMan" id="67108866" t="TSystem.Resources.ResourceManager" mod="s0">
		</field>
		<field n="resourceCulture" id="67108867" t="TSystem.Globalization.CultureInfo" mod="s0">
		</field>
		<constr id="100663300" mod="i">
		</constr>
		<prop n="ResourceManager" id="385875970" t="TSystem.Resources.ResourceManager" r="True" w="False" mod="si">
			<attrs>
				<attr t="aSystem.ComponentModel.EditorBrowsableAttribute" constr="100665195">
					<args>
						<arg t="TSystem.ComponentModel.EditorBrowsableState" v="2"/>
					</args>
				</attr>
			</attrs>
		</prop>
		<prop n="Culture" id="385875971" t="TSystem.Globalization.CultureInfo" r="True" w="True" mod="si">
			<attrs>
				<attr t="aSystem.ComponentModel.EditorBrowsableAttribute" constr="100665195">
					<args>
						<arg t="TSystem.ComponentModel.EditorBrowsableState" v="2"/>
					</args>
				</attr>
			</attrs>
		</prop>
	</type>
	<type n="TTokenRule" ns="GreenZoneParser.Lexer" id="33554436" mod="aP" t="cl">
		<field n="parser" id="67108868" t="TGreenZoneParser.Parser" mod="rp">
		</field>
		<field n="currentState" id="67108869" t="TGreenZoneParser.Lexer.TokenMatchState" mod="p">
		</field>
		<field n="tokenId" id="67108870" t="TGreenZoneParser.Lexer.TokenId" mod="p">
		</field>
		<field n="tokenStart" id="67108871" t="n" mod="p">
		</field>
		<field n="tokenEnd" id="67108872" t="n" mod="p">
		</field>
		<field n="currentErrors" id="67108873" t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" mod="rp">
		</field>
		<constr id="100663304" mod="p">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenId" n="tokenId">
			</param>
		</constr>
		<constr id="100663305" mod="p">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
		</constr>
		<method n="TGenerateToken" id="100663314" rt="TGreenZoneParser.Lexer.Token" mod="P">
			<param t="n" n="totalIndex">
			</param>
			<param t="n" n="index">
			</param>
			<param t="n" n="blockIndex">
			</param>
			<param t="n" n="arrayIndex">
			</param>
			<param t="n" n="parenIndex">
			</param>
			<param t="n" n="genericIndex">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="block">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="genericBlock">
			</param>
		</method>
		<method n="TReset" id="100663315" rt="v" mod="ai">
		</method>
		<method n="TApply" id="100663316" rt="v" mod="ai">
			<param t="c" n="ch">
			</param>
			<param t="c" n="next_ch">
			</param>
		</method>
		<prop n="Parser" id="385875972" t="TGreenZoneParser.Parser" r="True" w="False" mod="P">
		</prop>
		<prop n="CurrentState" id="385875973" t="TGreenZoneParser.Lexer.TokenMatchState" r="True" w="False" mod="P">
		</prop>
		<prop n="TokenId" id="385875974" t="TGreenZoneParser.Lexer.TokenId" r="True" w="False" mod="P">
		</prop>
		<prop n="TokenStart" id="385875975" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="TokenEnd" id="385875976" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="CurrentTokenContent" id="385875977" t="X" r="True" w="False" mod="vP">
		</prop>
		<prop n="Value" id="385875978" t="O" r="True" w="False" mod="vP">
		</prop>
		<prop n="CurrentErrors" id="385875979" t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TMultiLineCommentTokenRule" ns="GreenZoneParser.Lexer" id="33554437" mod="" t="cl">
		<base-t n="TGreenZoneParser.Lexer.TokenRule" id="33554436"/>
		<type n="TGreenZoneParser.Lexer.MultiLineCommentTokenRule+TMultiLineCommentMatchState" ns="GreenZoneParser.Lexer" id="33554438" mod="e0" t="en">
			<base n="n" id="33554686"/>
			<item n="NORMAL" v="0"/>
			<item n="AFTER_BEGIN_1" v="1"/>
			<item n="AFTER_END_1" v="2"/>
		</type>
		<field n="state" id="67108874" t="TGreenZoneParser.Lexer.MultiLineCommentTokenRule+TMultiLineCommentMatchState" mod="0">
		</field>
		<constr id="100663317" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
		</constr>
		<method n="TReset" id="100663318" rt="v" mod="oi">
		</method>
		<method n="TApply" id="100663319" rt="v" mod="oi">
			<param t="c" n="ch">
			</param>
			<param t="c" n="next_ch">
			</param>
		</method>
	</type>
	<type n="THexLiteralTokenRule" ns="GreenZoneParser.Lexer" id="33554439" mod="" t="cl">
		<base-t n="TGreenZoneParser.Lexer.TokenRule" id="33554436"/>
		<type n="TGreenZoneParser.Lexer.HexLiteralTokenRule+THexLiteralMatchState" ns="GreenZoneParser.Lexer" id="33554440" mod="e0" t="en">
			<base n="n" id="33554686"/>
			<item n="NOT_STARTED" v="0"/>
			<item n="BEGINNING" v="1"/>
			<item n="AFTER_END_1" v="2"/>
			<item n="AFTER_END_2" v="3"/>
			<item n="AFTER_END_1_2" v="4"/>
		</type>
		<field n="state" id="67108879" t="TGreenZoneParser.Lexer.HexLiteralTokenRule+THexLiteralMatchState" mod="0">
		</field>
		<field n="hexChars" id="67108880" t="X" mod="0">
		</field>
		<field n="endingByte" id="67108881" t="X" mod="0">
		</field>
		<field n="endingShort" id="67108882" t="X" mod="0">
		</field>
		<field n="endingInt" id="67108883" t="X" mod="0">
		</field>
		<field n="endingLong" id="67108884" t="X" mod="0">
		</field>
		<field n="endingUnsigned" id="67108885" t="X" mod="0">
		</field>
		<field n="value" id="67108886" t="e" mod="0">
		</field>
		<constr id="100663320" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
		</constr>
		<method n="TReset" id="100663323" rt="v" mod="oi">
		</method>
		<method n="TApply" id="100663324" rt="v" mod="oi">
			<param t="c" n="ch">
			</param>
			<param t="c" n="next_ch">
			</param>
		</method>
		<method n="TappendNum" id="100663325" rt="b" mod="0">
			<param t="c" n="ch">
			</param>
		</method>
		<method n="TparseTypeEnding" id="100663326" rt="b" mod="0">
			<param t="X" n="typeEnding">
			</param>
			<param t="c" n="ch">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenId" n="preferredToken">
			</param>
			<param t="b" n="isFp">
			</param>
		</method>
		<prop n="Value" id="385875980" t="O" r="True" w="False" mod="oP">
		</prop>
		<prop n="NumberContent" id="385875981" t="X" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TTokenizer" ns="GreenZoneParser" id="33554441" mod="aP" t="cl">
		<field n="fileContent" id="67108893" t="X" mod="r0">
		</field>
		<field n="ch1" id="67108894" t="c" mod="0">
		</field>
		<field n="ch2" id="67108895" t="c" mod="0">
		</field>
		<field n="rules" id="67108896" t="G1TGreenZoneParser.Lexer.TokenRule;System.Collections.Generic.List" mod="rp">
		</field>
		<field n="workingRules" id="67108897" t="G1TGreenZoneParser.Lexer.TokenRule;System.Collections.Generic.List" mod="0">
		</field>
		<field n="lastMatched" id="67108898" t="G1TGreenZoneParser.Lexer.TokenRule;System.Collections.Generic.List" mod="0">
		</field>
		<field n="afterLastMatchedPosition" id="67108899" t="n" mod="0">
		</field>
		<field n="lastInvalidTokenStartPosition" id="67108900" t="n" mod="0">
		</field>
		<field n="lastInvalidToken" id="67108901" t="TSystem.Text.StringBuilder" mod="0">
		</field>
		<field n="parser" id="67108902" t="TGreenZoneParser.Parser" mod="rp">
		</field>
		<field n="prereadPosition" id="67108903" t="n" mod="p">
		</field>
		<field n="position" id="67108904" t="n" mod="p">
		</field>
		<field n="totalResult" id="67108905" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="rp">
		</field>
		<field n="totalResultUm" id="67108906" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="result" id="67108907" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="rp">
		</field>
		<field n="resultUm" id="67108908" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100663327" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="X" n="fileContent">
			</param>
		</constr>
		<method n="TInit" id="100663328" rt="v" mod="p">
		</method>
		<method n="TPrevious" id="100663336" rt="TGreenZoneParser.Lexer.Token" mod="P">
			<param t="TGreenZoneParser.Lexer.Token" n="token">
			</param>
		</method>
		<method n="TNext" id="100663337" rt="TGreenZoneParser.Lexer.Token" mod="P">
			<param t="TGreenZoneParser.Lexer.Token" n="token">
			</param>
		</method>
		<method n="TTokenize" id="100663338" rt="v" mod="i">
		</method>
		<method n="TClearTokens" id="100663339" rt="v" mod="vP">
		</method>
		<method n="TReadNextToken" id="100663340" rt="v" mod="0">
		</method>
		<method n="TprocessRule" id="100663341" rt="TGreenZoneParser.Lexer.Token" mod="ap">
			<param t="TGreenZoneParser.Lexer.TokenRule" n="rule">
			</param>
		</method>
		<method n="Tread" id="100663342" rt="c" mod="p">
		</method>
		<prop n="Parser" id="385875982" t="TGreenZoneParser.Parser" r="True" w="False" mod="P">
		</prop>
		<prop n="Position" id="385875983" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="Finished" id="385875984" t="b" r="True" w="False" mod="P">
		</prop>
		<prop n="TotalResult" id="385875985" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Result" id="385875986" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="FirstToken" id="385875987" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="LastToken" id="385875988" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TCsTokenizer" ns="GreenZoneParser" id="33554442" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Tokenizer" id="33554441"/>
		<field n="currentBlock" id="67108909" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="0">
		</field>
		<field n="currentGeneric" id="67108910" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="0">
		</field>
		<field n="blockOpenClose" id="67108911" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="r0">
		</field>
		<field n="blockOpens" id="67108912" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="blockOpensUm" id="67108913" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="arrayOpens" id="67108914" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="arrayOpensUm" id="67108915" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="parenOpens" id="67108916" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="parenOpensUm" id="67108917" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="genericOpens" id="67108918" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="genericOpensUm" id="67108919" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100663343" mod="i">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="X" n="fileContent">
			</param>
		</constr>
		<method n="TBlock" id="100663350" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
			<param t="TGreenZoneParser.Lexer.Token" n="token">
			</param>
		</method>
		<method n="TArray" id="100663351" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
			<param t="TGreenZoneParser.Lexer.Token" n="token">
			</param>
		</method>
		<method n="TArrayByClose" id="100663352" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
			<param t="TGreenZoneParser.Lexer.Token" n="token">
			</param>
		</method>
		<method n="TParen" id="100663353" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
			<param t="TGreenZoneParser.Lexer.Token" n="token">
			</param>
		</method>
		<method n="TGeneric" id="100663354" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
			<param t="TGreenZoneParser.Lexer.Token" n="token">
			</param>
		</method>
		<method n="TprocessRule" id="100663355" rt="TGreenZoneParser.Lexer.Token" mod="op">
			<param t="TGreenZoneParser.Lexer.TokenRule" n="rule">
			</param>
		</method>
		<method n="Tpush" id="100663356" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="0">
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="currentToc">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenCloseType" n="type">
			</param>
		</method>
		<method n="Tpop" id="100663357" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="0">
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="currentToc">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenCloseType" n="type">
			</param>
		</method>
		<prop n="CsParser" id="385875989" t="TGreenZoneParser.CsParser" r="True" w="False" mod="P">
		</prop>
		<prop n="BlockOpenClose" id="385875990" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="BlockOpens" id="385875991" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="ArrayOpens" id="385875992" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="ParenOpens" id="385875993" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="GenericOpens" id="385875994" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TSearchForm" ns="GreenZoneParser" id="33554443" mod="P" t="cl">
		<base-t n="TSystem.Windows.Forms.Form" id="33555464"/>
		<field n="components" id="67108920" t="TSystem.ComponentModel.IContainer" mod="0">
		</field>
		<field n="label1" id="67108921" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="searchTb" id="67108922" t="TSystem.Windows.Forms.TextBox" mod="0">
		</field>
		<field n="caseSensitiveChb" id="67108923" t="TSystem.Windows.Forms.CheckBox" mod="0">
		</field>
		<field n="label2" id="67108924" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="goToLineNupd" id="67108925" t="TSystem.Windows.Forms.NumericUpDown" mod="0">
		</field>
		<field n="SearchButton" id="67108926" t="TSystem.Windows.Forms.Button" mod="0">
		</field>
		<field n="_CancelButton" id="67108927" t="TSystem.Windows.Forms.Button" mod="0">
		</field>
		<field n="goToLineButton" id="67108928" t="TSystem.Windows.Forms.Button" mod="0">
		</field>
		<field n="form1" id="67108929" t="TGreenZoneParser.ParseTesterForm" mod="0">
		</field>
		<method n="TDispose" id="100663358" rt="v" mod="op">
			<param t="b" n="disposing">
			</param>
		</method>
		<method n="TInitializeComponent" id="100663359" rt="v" mod="0">
		</method>
		<constr id="100663360" mod="P">
			<param t="TGreenZoneParser.ParseTesterForm" n="form1">
			</param>
		</constr>
		<method n="TgoToLineButton_Click" id="100663361" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TSearchButton_Click" id="100663362" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TCancelButton_Click" id="100663363" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
	</type>
	<type n="TBaseNode" ns="GreenZoneParser.Parsers" id="33554444" mod="P" t="cl">
		<base-i n="TSystem.IComparable" id="33554442"/>
		<base-i n="G1TGreenZoneParser.Parsers.BaseNode;System.IComparable" id="33554494"/>
		<field n="parser" id="67108930" t="TGreenZoneParser.Parser" mod="rp">
		</field>
		<field n="parent" id="67108931" t="TGreenZoneParser.Parsers.BaseNode" mod="rp">
		</field>
		<field n="startPos" id="67108932" t="n" mod="0">
		</field>
		<field n="endPos" id="67108933" t="n" mod="0">
		</field>
		<constr id="100663364" mod="P">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parent">
			</param>
			<param t="n" n="startPos">
			</param>
			<param t="n" n="endPos">
			</param>
		</constr>
		<constr id="100663365" mod="P">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parent">
			</param>
			<param t="n" n="startPos">
			</param>
		</constr>
		<constr id="100663366" mod="P">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parent">
			</param>
		</constr>
		<method n="TToString" id="100663375" rt="X" mod="oP">
		</method>
		<method n="TCompareTo" id="100663376" rt="n" mod="vP">
			<param t="O" n="obj">
			</param>
		</method>
		<method n="TCompareTo" id="100663377" rt="n" mod="vP">
			<param t="TGreenZoneParser.Parsers.BaseNode" n="other">
			</param>
		</method>
		<prop n="Parser" id="385875995" t="TGreenZoneParser.Parser" r="True" w="False" mod="P">
		</prop>
		<prop n="Parent" id="385875996" t="TGreenZoneParser.Parsers.BaseNode" r="True" w="False" mod="P">
		</prop>
		<prop n="StartPos" id="385875997" t="n" r="True" w="True" mod="P" set-mod="i">
		</prop>
		<prop n="EndPos" id="385875998" t="n" r="True" w="True" mod="P" set-mod="i">
		</prop>
		<prop n="Length" id="385875999" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="Content" id="385876000" t="X" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TBaseCsNode" ns="GreenZoneParser.Parsers.Cs" id="33554445" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.BaseNode" id="33554444"/>
		<field n="startToken" id="67108934" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="endToken" id="67108935" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<constr id="100663378" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
		</constr>
		<method n="TParseAttributes" id="100663383" rt="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" mod="p">
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="from">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="to">
			</param>
		</method>
		<method n="TParseModifiers" id="100663384" rt="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" mod="p">
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="from">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="to">
			</param>
		</method>
		<method n="TToString" id="100663385" rt="X" mod="oP">
		</method>
		<prop n="CSParser" id="385876001" t="TGreenZoneParser.CsParser" r="True" w="False" mod="P">
		</prop>
		<prop n="Parent" id="385876002" t="TGreenZoneParser.Parsers.Cs.BlockNode" r="True" w="False" mod="P">
		</prop>
		<prop n="StartToken" id="385876003" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="EndToken" id="385876004" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TNormalNode" ns="GreenZoneParser.Parsers.Cs" id="33554446" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.BaseCsNode" id="33554445"/>
		<constr id="100663386" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
		</constr>
	</type>
	<type n="TModifierNode" ns="GreenZoneParser.Parsers.Cs" id="33554447" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.NormalNode" id="33554446"/>
		<constr id="100663387" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="token">
			</param>
		</constr>
	</type>
	<type n="TControlNode" ns="GreenZoneParser.Parsers.Cs" id="33554448" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.NormalNode" id="33554446"/>
		<field n="attributes" id="67108936" t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="attributesUm" id="67108937" t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.IList" mod="rp">
		</field>
		<field n="modifiers" id="67108938" t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="modifiersUm" id="67108939" t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.IList" mod="rp">
		</field>
		<constr id="100663388" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="firstHeaderToken">
			</param>
		</constr>
		<constr id="100663389" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
		</constr>
		<prop n="Attributes" id="385876005" t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Modifiers" id="385876006" t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554449" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ControlNode" id="33554448"/>
		<field n="linqKeywords" id="67108940" t="G1TGreenZoneParser.Lexer.TokenId;System.Collections.Generic.SortedSet" mod="s0">
		</field>
		<field n="id" id="67108941" t="TGreenZoneParser.Parsers.StatementId" mod="r0">
		</field>
		<field n="parseMode" id="67108942" t="TGreenZoneParser.Parsers.Cs.StatementParseMode" mod="r0">
		</field>
		<field n="subStatementsBlock" id="67108943" t="TGreenZoneParser.Parsers.Cs.BlockNode" mod="0">
		</field>
		<field n="tailStatement" id="67108944" t="TGreenZoneParser.Parsers.Cs.StatementNode" mod="0">
		</field>
		<constr id="100663392" mod="s0">
		</constr>
		<constr id="100663393" mod="P">
			<param t="TGreenZoneParser.Parsers.StatementId" n="id">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<method n="TCreate" id="100663398" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="sP">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TCreateCommonMethodStatement" id="100663399" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TCreateHeaderMethodStatement" id="100663400" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TCreateInsideMethodStatement" id="100663401" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseNamespaceDefStatementNode" id="100663402" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseClassDefStatementNode" id="100663403" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseStructDefStatementNode" id="100663404" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseInterfaceDefStatementNode" id="100663405" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseRefTypeDefHeader" id="100663406" rt="b" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.List" n="supertypes">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.UserTypeSpecifierNode" n="utypeDefMain">
			</param>
		</method>
		<method n="TParseEnumDefStatementNode" id="100663407" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseDelegateDefStatementNode" id="100663408" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseEventDeclStatementNode" id="100663409" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseUsingDeclStatementNode" id="100663410" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseLogicalExpressionNode" id="100663411" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseForEachSubStatementNode" id="100663412" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseArrayInitializerNode" id="100663413" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseEnumConstantNode" id="100663414" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseCaseStatementNode" id="100663415" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseReturnStatementNode" id="100663416" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseThrowStatementNode" id="100663417" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseMemberDecl" id="100663418" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
			<param t="b" n="enableFields">
			</param>
			<param t="b" n="enableMethods">
			</param>
			<param t="b" n="enableConstructor">
			</param>
			<param t="b" n="enableProperties">
			</param>
		</method>
		<method n="TParseMethodStatement" id="100663419" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</method>
		<method n="TParseVarDeclStatementNode" id="100663420" rt="TGreenZoneParser.Parsers.Cs.VarDeclStatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="enableMultiple">
			</param>
			<param t="b" n="enablePureType">
			</param>
			<param t="b" n="enableNoAssign">
			</param>
			<param t="b" n="enableWithAssign">
			</param>
		</method>
		<method n="TParseVarDeclStatementNode" id="100663421" rt="TGreenZoneParser.Parsers.Cs.VarDeclStatementNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" n="typeLeft">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="nextToken">
			</param>
			<param t="b" n="enableMultiple">
			</param>
			<param t="b" n="enableNoAssign">
			</param>
			<param t="b" n="enableWithAssign">
			</param>
		</method>
		<method n="TParseArgument" id="100663422" rt="TGreenZoneParser.Parsers.Cs.ArgumentNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
		</method>
		<method n="TParseVarDeclArgument" id="100663423" rt="TGreenZoneParser.Parsers.Cs.VarDeclArgumentNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
		</method>
		<method n="TParseExpression" id="100663424" rt="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
		</method>
		<method n="TParseUnaryExpression" id="100663425" rt="TGreenZoneParser.Parsers.Cs.UnaryOperationNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenId" n="operatorTokenId">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="leftSideOperator">
			</param>
		</method>
		<method n="TParseBinaryExpression" id="100663426" rt="TGreenZoneParser.Parsers.Cs.BinaryOperationNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenId" n="operatorTokenId">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="leftAssoc">
			</param>
		</method>
		<method n="TParseBinaryShiftExpression" id="100663427" rt="TGreenZoneParser.Parsers.Cs.BinaryShiftOperationNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="leftShift">
			</param>
		</method>
		<method n="TParseTernaryExpression" id="100663428" rt="TGreenZoneParser.Parsers.Cs.TernaryOperationNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenId" n="operatorTokenId1">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenId" n="operatorTokenId2">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="leftAssoc">
			</param>
		</method>
		<method n="TParseCastOrParenExpression" id="100663429" rt="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
		</method>
		<method n="TParseObjectOrArrayCreationExpression" id="100663430" rt="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
		</method>
		<method n="TParseLinqExpression" id="100663431" rt="TGreenZoneParser.Parsers.Cs.LinqExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
		</method>
		<method n="TParseLinqExpressionBody" id="100663432" rt="TGreenZoneParser.Parsers.Cs.LinqExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.LinqFromExpressionNode" n="firstFrom">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="nextToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="prevToken">
			</param>
		</method>
		<method n="TParseLinqContinuationExpression" id="100663433" rt="TGreenZoneParser.Parsers.Cs.LinqContinuationExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="nextToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="prevToken">
			</param>
		</method>
		<method n="TParseLinqFromClause" id="100663434" rt="TGreenZoneParser.Parsers.Cs.LinqFromExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="nextToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="prevToken">
			</param>
		</method>
		<method n="TParseLinqJoinClause" id="100663435" rt="TGreenZoneParser.Parsers.Cs.LinqJoinExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="nextToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="prevToken">
			</param>
		</method>
		<method n="TParseLinqLetClause" id="100663436" rt="TGreenZoneParser.Parsers.Cs.LinqLetExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="nextToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="prevToken">
			</param>
		</method>
		<method n="TParseLinqWhereClause" id="100663437" rt="TGreenZoneParser.Parsers.Cs.LinqWhereExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="nextToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="prevToken">
			</param>
		</method>
		<method n="TParseLinqOrderByClause" id="100663438" rt="TGreenZoneParser.Parsers.Cs.LinqOrderByExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="nextToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="prevToken">
			</param>
		</method>
		<method n="TParseLinqGroupByClause" id="100663439" rt="TGreenZoneParser.Parsers.Cs.LinqGroupByExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="nextToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="prevToken">
			</param>
		</method>
		<method n="TParseLinqSelectClause" id="100663440" rt="TGreenZoneParser.Parsers.Cs.LinqSelectExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="nextToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="prevToken">
			</param>
		</method>
		<method n="TlinqOrderingToNext" id="100663441" rt="TGreenZoneParser.Parsers.Cs.LinqOrderingExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenId" n="expectedTokenId">
			</param>
			<param t="X" n="expectedTokenInf">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="nextToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="prevToken">
			</param>
		</method>
		<method n="TlinqExpressionToNext" id="100663442" rt="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenId" n="expectedTokenId">
			</param>
			<param t="X" n="expectedTokenInf">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="nextToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="prevToken">
			</param>
		</method>
		<method n="TlinqFindNextKeyword" id="100663443" rt="TGreenZoneParser.Lexer.Token" mod="s0">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="parentBlock">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="from">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="prevToken">
			</param>
		</method>
		<method n="TParsePrimaryExpression" id="100663444" rt="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
		</method>
		<method n="TParseParenExpression" id="100663445" rt="TGreenZoneParser.Parsers.Cs.ParenExpressionNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="parens">
			</param>
		</method>
		<method n="TParseTypeSpecifier" id="100663446" rt="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="castParen">
			</param>
		</method>
		<method n="TParseTypeSpecifier" id="100663447" rt="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="nextToken">
			</param>
			<param t="b" n="definition">
			</param>
			<param t="b" n="declaration">
			</param>
			<param t="b" n="exact">
			</param>
		</method>
		<method n="TCreateTypeSpecifierNode" id="100663448" rt="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.List" n="firstBracketExpressions">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.List" n="typeParameters">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="array">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="firstRanks">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="lastRanks">
			</param>
			<param t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" n="ids">
			</param>
			<param t="b" n="systype">
			</param>
			<param t="n" n="commaSeparatedRanks">
			</param>
			<param t="n" n="emptyRanks">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="pointerStar">
			</param>
		</method>
		<method n="TParseArrayRanks" id="100663449" rt="b" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="array">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.List" n="firstBracketExpressions">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="firstRanks">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="lastRanks">
			</param>
			<param t="n" n="commaSeparatedRanks">
			</param>
			<param t="n" n="emptyRanks">
			</param>
			<param t="b" n="enableEmpty">
			</param>
			<param t="b" n="enableNonEmpty">
			</param>
		</method>
		<method n="TParseTypeParameters" id="100663450" rt="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.List" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="genericBlock">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="nextToken">
			</param>
			<param t="b" n="lastInclusive">
			</param>
			<param t="b" n="exact">
			</param>
		</method>
		<method n="TParseExpressionList" id="100663451" rt="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.List" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="toc">
			</param>
			<param t="b" n="lastInclusive">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
		</method>
		<method n="TParseExpressionList" id="100663452" rt="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.List" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="toc">
			</param>
			<param t="n" n="commaFrom">
			</param>
			<param t="n" n="commaTo">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="from">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="to">
			</param>
		</method>
		<method n="TParseArgumentList" id="100663453" rt="G1TGreenZoneParser.Parsers.Cs.ArgumentNode;System.Collections.Generic.List" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="toc">
			</param>
			<param t="b" n="lastInclusive">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
		</method>
		<method n="TParseArgumentList" id="100663454" rt="G1TGreenZoneParser.Parsers.Cs.ArgumentNode;System.Collections.Generic.List" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="toc">
			</param>
			<param t="n" n="commaFrom">
			</param>
			<param t="n" n="commaTo">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="from">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="to">
			</param>
		</method>
		<method n="TParseVarDeclArgumentList" id="100663455" rt="G1TGreenZoneParser.Parsers.Cs.VarDeclArgumentNode;System.Collections.Generic.List" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="toc">
			</param>
			<param t="b" n="lastInclusive">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
		</method>
		<method n="TParseVarDeclArgumentList" id="100663456" rt="G1TGreenZoneParser.Parsers.Cs.VarDeclArgumentNode;System.Collections.Generic.List" mod="s0">
			<param t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" n="errors">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="toc">
			</param>
			<param t="n" n="commaFrom">
			</param>
			<param t="n" n="commaTo">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="from">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="to">
			</param>
		</method>
		<method n="TParseIdsLeft" id="100663457" rt="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="s0">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="t">
			</param>
		</method>
		<method n="TParseIdsRight" id="100663458" rt="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="s0">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="t">
			</param>
		</method>
		<prop n="Id" id="385876007" t="TGreenZoneParser.Parsers.StatementId" r="True" w="False" mod="P">
		</prop>
		<prop n="ParseMode" id="385876008" t="TGreenZoneParser.Parsers.Cs.StatementParseMode" r="True" w="False" mod="P">
		</prop>
		<prop n="SubStatementsBlock" id="385876009" t="TGreenZoneParser.Parsers.Cs.BlockNode" r="True" w="False" mod="P">
		</prop>
		<prop n="TailStatement" id="385876010" t="TGreenZoneParser.Parsers.Cs.StatementNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TTypeDefStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554450" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<field n="typeName" id="67108945" t="X" mod="r0">
		</field>
		<field n="identifierTokens" id="67108946" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="identifierTokensUm" id="67108947" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100663459" mod="P">
			<param t="TGreenZoneParser.Parsers.StatementId" n="id">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" n="identifierTokens">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="TypeName" id="385876011" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="IdentifierTokens" id="385876012" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TRefTypeDefStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554451" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.TypeDefStatementNode" id="33554450"/>
		<field n="typeDefinitionMain" id="67108948" t="TGreenZoneParser.Parsers.Cs.UserTypeSpecifierNode" mod="r0">
		</field>
		<field n="supertypes" id="67108949" t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="supertypesUm" id="67108950" t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100663462" mod="P">
			<param t="TGreenZoneParser.Parsers.StatementId" n="id">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.UserTypeSpecifierNode" n="typeDefinitionMain">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.List" n="supertypes">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="TypeDefinitionMain" id="385876013" t="TGreenZoneParser.Parsers.Cs.UserTypeSpecifierNode" r="True" w="False" mod="P">
		</prop>
		<prop n="Supertypes" id="385876014" t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TLockStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554452" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100663465" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TPropertyDefStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554453" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<field n="varDeclHeader" id="67108951" t="TGreenZoneParser.Parsers.Cs.VarDeclStatementNode" mod="r0">
		</field>
		<constr id="100663466" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.VarDeclStatementNode" n="varDeclHeader">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="VarDeclHeader" id="385876015" t="TGreenZoneParser.Parsers.Cs.VarDeclStatementNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TThrowStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554454" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<field n="right" id="67108952" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100663468" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="right">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="Right" id="385876016" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554455" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<field n="acceptedTypes" id="67108953" t="G1TGreenZoneParser.Parsers.Cs.ResolvedType;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="acceptedTypesUm" id="67108954" t="G1TGreenZoneParser.Parsers.Cs.ResolvedType;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100663470" mod="P">
			<param t="TGreenZoneParser.Parsers.StatementId" n="expressionId">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<method n="TAddAcceptedType" id="100663473" rt="v" mod="i">
			<param t="TGreenZoneParser.Parsers.Cs.ResolvedType" n="type">
			</param>
		</method>
		<prop n="AcceptedTypes" id="385876017" t="G1TGreenZoneParser.Parsers.Cs.ResolvedType;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="ValidStatement" id="385876018" t="b" r="True" w="False" mod="vP">
		</prop>
	</type>
	<type n="TParenExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554456" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="parens" id="67108955" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="r0">
		</field>
		<field n="inner" id="67108956" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100663474" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="parens">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="inner">
			</param>
		</constr>
		<prop n="Parens" id="385876019" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="Inner" id="385876020" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TCastExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554457" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="castParen" id="67108957" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="r0">
		</field>
		<field n="typeSpecifier" id="67108958" t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" mod="r0">
		</field>
		<field n="right" id="67108959" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100663477" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="castParen">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" n="typeSpecifier">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="right">
			</param>
		</constr>
		<prop n="CastParen" id="385876021" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="TypeSpecifier" id="385876022" t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" r="True" w="False" mod="P">
		</prop>
		<prop n="Right" id="385876023" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TVarDeclArgumentNode" ns="GreenZoneParser.Parsers.Cs" id="33554458" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="type" id="67108960" t="TGreenZoneParser.Parsers.Cs.ArgumentType" mod="r0">
		</field>
		<field n="refToken" id="67108961" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="right" id="67108962" t="TGreenZoneParser.Parsers.Cs.VarDeclStatementNode" mod="r0">
		</field>
		<constr id="100663481" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ArgumentType" n="type">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="refToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.VarDeclStatementNode" n="right">
			</param>
		</constr>
		<prop n="Type" id="385876024" t="TGreenZoneParser.Parsers.Cs.ArgumentType" r="True" w="False" mod="P">
		</prop>
		<prop n="RefToken" id="385876025" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="Right" id="385876026" t="TGreenZoneParser.Parsers.Cs.VarDeclStatementNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TDefaultExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554459" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="keywordToken" id="67108963" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="parens" id="67108964" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="r0">
		</field>
		<field n="innerExpression" id="67108965" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100663485" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="parens">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="keywordToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="innerExpression">
			</param>
		</constr>
		<prop n="KeywordToken" id="385876027" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="Parens" id="385876028" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="InnerExpression" id="385876029" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TPureReflResolver" ns="GreenZoneParser.Reflect" id="33554460" mod="P" t="cl">
		<field n="asms" id="67108966" t="G1TSystem.Reflection.Assembly;System.Collections.Generic.List" mod="0">
		</field>
		<field n="resolver" id="67108967" t="TGreenZoneParser.Reflect.Resolver" mod="0">
		</field>
		<constr id="100663489" mod="P">
			<param t="TGreenZoneParser.Reflect.Resolver" n="resolver">
			</param>
		</constr>
		<method n="TResolve" id="100663490" rt="TGreenZoneParser.Reflect.ReflType" mod="i">
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="typeInfo">
			</param>
			<param t="t" n="type" p="Out">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OutAttribute" constr="100678643">
					</attr>
				</attrs>
			</param>
		</method>
		<method n="TResolve" id="100663491" rt="TGreenZoneParser.Reflect.ReflType" mod="0">
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="t" n="type">
			</param>
		</method>
		<method n="TFinishResolve" id="100663492" rt="v" mod="i">
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="t" n="type">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflType" n="rtype">
			</param>
		</method>
		<method n="TparseReflMember" id="100663493" rt="TGreenZoneParser.Reflect.ReflMember" mod="0">
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TSystem.Reflection.MemberInfo" n="memberNode">
			</param>
		</method>
		<method n="TparseReflMethod" id="100663494" rt="TGreenZoneParser.Reflect.ReflMethod" mod="0">
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TSystem.Reflection.MethodInfo" n="memberNode">
			</param>
		</method>
		<method n="TparseReflConstr" id="100663495" rt="TGreenZoneParser.Reflect.ReflConstructor" mod="0">
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TSystem.Reflection.ConstructorInfo" n="memberNode">
			</param>
		</method>
		<method n="TparseReflProp" id="100663496" rt="TGreenZoneParser.Reflect.ReflMember" mod="0">
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TSystem.Reflection.PropertyInfo" n="memberNode">
			</param>
		</method>
		<method n="TparseReflField" id="100663497" rt="TGreenZoneParser.Reflect.ReflField" mod="0">
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TSystem.Reflection.FieldInfo" n="memberNode">
			</param>
		</method>
		<method n="TparseReflEvent" id="100663498" rt="TGreenZoneParser.Reflect.ReflEvent" mod="0">
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TSystem.Reflection.EventInfo" n="memberNode">
			</param>
		</method>
		<method n="TparseReflGenericArgDefs" id="100663499" rt="A1TGreenZoneParser.Reflect.ReflTypeArgDefinition;" mod="0">
			<param t="t" n="type">
			</param>
		</method>
		<method n="TparseReflGenericArgDefs" id="100663500" rt="A1TGreenZoneParser.Reflect.ReflTypeArgDefinition;" mod="0">
			<param t="TSystem.Reflection.MethodInfo" n="minf">
			</param>
		</method>
		<method n="TparseReflGenericArgDefs" id="100663501" rt="A1TGreenZoneParser.Reflect.ReflTypeArgDefinition;" mod="0">
			<param t="A1t" n="gas">
			</param>
		</method>
		<method n="TparseReflAttributes" id="100663502" rt="A1TGreenZoneParser.Reflect.ReflAttribute;" mod="0">
			<param t="TSystem.Reflection.MemberInfo" n="memberInfo">
			</param>
		</method>
		<method n="TparseReflAttributes" id="100663503" rt="A1TGreenZoneParser.Reflect.ReflAttribute;" mod="0">
			<param t="G1TSystem.Reflection.CustomAttributeData;System.Collections.Generic.IEnumerable" n="attrs">
			</param>
		</method>
		<method n="TparseReflMethodParameters" id="100663504" rt="A1TGreenZoneParser.Reflect.ReflMethodArgDefinition;" mod="0">
			<param t="TSystem.Reflection.MethodBase" n="methodNode">
			</param>
		</method>
		<method n="TparseReflMethodParameters" id="100663505" rt="A1TGreenZoneParser.Reflect.ReflMethodArgDefinition;" mod="0">
			<param t="TSystem.Reflection.PropertyInfo" n="propertyNode">
			</param>
		</method>
		<method n="TparseReflMethodParameters" id="100663506" rt="A1TGreenZoneParser.Reflect.ReflMethodArgDefinition;" mod="0">
			<param t="A1TSystem.Reflection.ParameterInfo;" n="parameters">
			</param>
			<param t="b" n="isExtension">
			</param>
		</method>
		<method n="TTypeCode" id="100663507" rt="X" mod="sP">
			<param t="t" n="type">
			</param>
			<param t="b" n="isClassDefinition">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
			<param t="b" n="omitSemicolon">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
		</method>
	</type>
	<type n="TRichTextBoxEx" ns="GreenZoneParser" id="33554461" mod="P" t="cl">
		<base-t n="TSystem.Windows.Forms.RichTextBox" id="33555947"/>
		<field n="WM_PAINT" id="67108968" t="n" const="15" mod="s0">
		</field>
		<field n="Paint" id="67108969" t="TSystem.Windows.Forms.PaintEventHandler" mod="0">
		</field>
		<method n="Tadd_Paint" id="100663508" rt="v" mod="P">
			<param t="TSystem.Windows.Forms.PaintEventHandler" n="value">
			</param>
		</method>
		<method n="Tremove_Paint" id="100663509" rt="v" mod="P">
			<param t="TSystem.Windows.Forms.PaintEventHandler" n="value">
			</param>
		</method>
		<method n="TGoTo" id="100663514" rt="v" mod="P">
			<param t="n" n="line">
			</param>
			<param t="n" n="column">
			</param>
			<param t="n" n="length">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
		</method>
		<method n="TGetLineY" id="100663515" rt="n" mod="P">
			<param t="n" n="line">
			</param>
		</method>
		<method n="TGetYLine" id="100663516" rt="n" mod="P">
			<param t="n" n="y">
			</param>
		</method>
		<method n="TWndProc" id="100663517" rt="v" mod="op">
			<param t="TSystem.Windows.Forms.Message" n="m">
			</param>
		</method>
		<constr id="100663518" mod="P">
		</constr>
		<event n="Paint" id="335544321" t="TSystem.Windows.Forms.PaintEventHandler" mod="P">
		</event>
		<prop n="CurrentColumn" id="385876030" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="CurrentLine" id="385876031" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="NumberOfVisibleLines" id="385876032" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="LineHeight" id="385876033" t="n" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TXmlTokenizer" ns="GreenZoneParser.Xml" id="33554462" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Tokenizer" id="33554441"/>
		<field n="currentGeneric" id="67108970" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="0">
		</field>
		<field n="genericOpens" id="67108971" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="genericOpensUm" id="67108972" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100663519" mod="i">
			<param t="TGreenZoneParser.Xml.XmlParser" n="parser">
			</param>
			<param t="X" n="fileContent">
			</param>
		</constr>
		<method n="TClearTokens" id="100663522" rt="v" mod="oP">
		</method>
		<method n="TGeneric" id="100663523" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
			<param t="TGreenZoneParser.Lexer.Token" n="token">
			</param>
		</method>
		<method n="TprocessRule" id="100663524" rt="TGreenZoneParser.Lexer.Token" mod="op">
			<param t="TGreenZoneParser.Lexer.TokenRule" n="rule">
			</param>
		</method>
		<method n="Tpush" id="100663525" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="0">
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="currentToc">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenCloseType" n="type">
			</param>
		</method>
		<method n="Tpop" id="100663526" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="0">
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="currentToc">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenCloseType" n="type">
			</param>
		</method>
		<prop n="XmlParser" id="385876034" t="TGreenZoneParser.Xml.XmlParser" r="True" w="False" mod="P">
		</prop>
		<prop n="GenericOpens" id="385876035" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflBaseNode" ns="GreenZoneParser.Reflect" id="33554463" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Parsers.BaseNode" id="33554444"/>
		<field n="parseNode" id="67108973" t="TGreenZoneParser.Parsers.BaseNode" mod="r0">
		</field>
		<field n="isGuiSetup" id="67108974" t="b" mod="0">
		</field>
		<constr id="100663527" mod="P">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parent">
			</param>
		</constr>
		<prop n="TypeId" id="385876036" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="aP">
		</prop>
		<prop n="ParseNode" id="385876037" t="TGreenZoneParser.Parsers.BaseNode" r="True" w="False" mod="P">
		</prop>
		<prop n="IsGuiSetup" id="385876038" t="b" r="True" w="True" mod="P">
		</prop>
	</type>
	<type n="TReflMember" ns="GreenZoneParser.Reflect" id="33554464" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflBaseNode" id="33554463"/>
		<field n="isTopLevel" id="67108975" t="b" mod="rp">
		</field>
		<field n="id" id="67108976" t="X" mod="rp">
		</field>
		<field n="namespaceId" id="67108977" t="X" mod="rp">
		</field>
		<field n="declaringType" id="67108978" t="TGreenZoneParser.Reflect.ReflCallableType" mod="rp">
		</field>
		<field n="memberName" id="67108979" t="X" mod="rp">
		</field>
		<field n="modifiers" id="67108980" t="TGreenZoneParser.Reflect.ReflModifier" mod="r0">
		</field>
		<field n="attributes" id="67108981" t="G1TGreenZoneParser.Reflect.ReflAttribute;System.Collections.Generic.List" mod="ri">
		</field>
		<field n="attributesUm" id="67108982" t="G1TGreenZoneParser.Reflect.ReflAttribute;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100663532" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="X" n="namespaceId">
			</param>
			<param t="X" n="memberName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<constr id="100663533" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflCallableType" n="declaringType">
			</param>
			<param t="X" n="memberName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<constr id="100663534" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="X" n="namespaceId">
			</param>
			<param t="X" n="memberName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
		</constr>
		<constr id="100663535" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflCallableType" n="declaringType">
			</param>
			<param t="X" n="memberName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
		</constr>
		<method n="TAddAttribute" id="100663544" rt="v" mod="i">
			<param t="TGreenZoneParser.Reflect.ReflAttribute" n="attribute">
			</param>
		</method>
		<prop n="IsTopLevel" id="385876039" t="b" r="True" w="False" mod="P">
		</prop>
		<prop n="Id" id="385876040" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="NamespaceId" id="385876041" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="DeclaringType" id="385876042" t="TGreenZoneParser.Reflect.ReflCallableType" r="True" w="False" mod="P">
		</prop>
		<prop n="MemberName" id="385876043" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="Modifiers" id="385876044" t="TGreenZoneParser.Reflect.ReflModifier" r="True" w="False" mod="P">
		</prop>
		<prop n="Attributes" id="385876045" t="G1TGreenZoneParser.Reflect.ReflAttribute;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Name" id="385876046" t="X" r="True" w="False" mod="vP">
		</prop>
	</type>
	<type n="TReflField" ns="GreenZoneParser.Reflect" id="33554465" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflMember" id="33554464"/>
		<field n="fieldType" id="67108983" t="TGreenZoneParser.Reflect.ReflType" mod="rp">
		</field>
		<field n="isConstant" id="67108984" t="b" mod="r0">
		</field>
		<field n="constantValue" id="67108985" t="X" mod="r0">
		</field>
		<constr id="100663545" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflType" n="fieldType">
			</param>
			<param t="X" n="fieldName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
		</constr>
		<constr id="100663546" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflType" n="fieldType">
			</param>
			<param t="X" n="fieldName">
			</param>
			<param t="X" n="constantValue">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
		</constr>
		<prop n="TypeId" id="385876047" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="FieldType" id="385876048" t="TGreenZoneParser.Reflect.ReflType" r="True" w="False" mod="P">
		</prop>
		<prop n="IsConstant" id="385876049" t="b" r="True" w="False" mod="P">
		</prop>
		<prop n="ConstantValue" id="385876050" t="X" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflMethodBase" ns="GreenZoneParser.Reflect" id="33554466" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflMember" id="33554464"/>
		<field n="methodArgs" id="67108986" t="A1TGreenZoneParser.Reflect.ReflMethodArgDefinition;" mod="rp">
		</field>
		<constr id="100663551" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflCallableType" n="declaringType">
			</param>
			<param t="X" n="methodName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflMethodArgDefinition;" n="methodArgs" p="Params">
				<attrs>
					<attr t="aSystem.ParamArrayAttribute" constr="100667008">
					</attr>
				</attrs>
			</param>
		</constr>
		<method n="TArgByName" id="100663553" rt="TGreenZoneParser.Reflect.ReflMethodArgDefinition" mod="P">
			<param t="X" n="name">
			</param>
		</method>
		<prop n="MethodArgs" id="385876051" t="A1TGreenZoneParser.Reflect.ReflMethodArgDefinition;" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflConstructor" ns="GreenZoneParser.Reflect" id="33554467" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflMethodBase" id="33554466"/>
		<constr id="100663554" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflMethodArgDefinition;" n="methodArgs" p="Params">
				<attrs>
					<attr t="aSystem.ParamArrayAttribute" constr="100667008">
					</attr>
				</attrs>
			</param>
		</constr>
		<prop n="TypeId" id="385876052" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
	</type>
	<type n="TReflType" ns="GreenZoneParser.Reflect" id="33554468" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflMember" id="33554464"/>
		<field n="isInnerType" id="67108987" t="b" mod="rp">
		</field>
		<field n="parentType" id="67108988" t="TGreenZoneParser.Reflect.ReflDefType" mod="rp">
		</field>
		<constr id="100663556" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="X" n="namespaceId">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<constr id="100663557" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<prop n="IsInnerType" id="385876053" t="b" r="True" w="False" mod="P">
		</prop>
		<prop n="ParentType" id="385876054" t="TGreenZoneParser.Reflect.ReflDefType" r="True" w="False" mod="P">
		</prop>
		<prop n="ParentFullName" id="385876055" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="FullName" id="385876056" t="X" r="True" w="False" mod="vP">
		</prop>
	</type>
	<type n="TReflEnumType" ns="GreenZoneParser.Reflect" id="33554469" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflType" id="33554468"/>
		<field n="baseType" id="67108989" t="TGreenZoneParser.Reflect.ReflType" mod="r0">
		</field>
		<field n="enumConstants" id="67108990" t="G1TGreenZoneParser.Reflect.ReflEnumConstant;System.Collections.Generic.List" mod="rp">
		</field>
		<field n="enumConstantsUm" id="67108991" t="G1TGreenZoneParser.Reflect.ReflEnumConstant;System.Collections.Generic.IList" mod="rp">
		</field>
		<constr id="100663562" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="X" n="namespaceId">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflType" n="baseType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<constr id="100663563" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflType" n="baseType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<method n="TAddEnumConstant" id="100663567" rt="v" mod="i">
			<param t="TGreenZoneParser.Reflect.ReflEnumConstant" n="enumConstant">
			</param>
		</method>
		<prop n="TypeId" id="385876057" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="BaseType" id="385876058" t="TGreenZoneParser.Reflect.ReflType" r="True" w="False" mod="P">
		</prop>
		<prop n="EnumConstants" id="385876059" t="G1TGreenZoneParser.Reflect.ReflEnumConstant;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflMethodArg" ns="GreenZoneParser.Reflect" id="33554470" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflBaseNode" id="33554463"/>
		<field n="definition" id="67108992" t="TGreenZoneParser.Reflect.ReflMethodArgDefinition" mod="r0">
		</field>
		<field n="actualValue" id="67108993" t="O" mod="r0">
		</field>
		<constr id="100663568" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflMethodArgDefinition" n="definition">
			</param>
			<param t="O" n="actualValue">
			</param>
		</constr>
		<prop n="TypeId" id="385876060" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="Definition" id="385876061" t="TGreenZoneParser.Reflect.ReflMethodArgDefinition" r="True" w="False" mod="P">
		</prop>
		<prop n="ActualValue" id="385876062" t="O" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TFieldDeclStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554471" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<field n="varDeclHeader" id="67108994" t="TGreenZoneParser.Parsers.Cs.VarDeclStatementNode" mod="r0">
		</field>
		<constr id="100663572" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.VarDeclStatementNode" n="varDeclHeader">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="VarDeclHeader" id="385876063" t="TGreenZoneParser.Parsers.Cs.VarDeclStatementNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TResolvedType" ns="GreenZoneParser.Parsers.Cs" id="33554472" mod="P" t="cl">
		<method n="TCreate" id="100663574" rt="TGreenZoneParser.Parsers.Cs.ResolvedType" mod="si">
			<param t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" n="typeSpec">
			</param>
		</method>
		<constr id="100663575" mod="P">
		</constr>
	</type>
	<type n="TSystemResolvedType" ns="GreenZoneParser.Parsers.Cs" id="33554473" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ResolvedType" id="33554472"/>
		<field n="BOOLEAN" id="67108995" t="TGreenZoneParser.Parsers.Cs.SystemResolvedType" mod="srP">
		</field>
		<field n="OBJECT" id="67108996" t="TGreenZoneParser.Parsers.Cs.SystemResolvedType" mod="srP">
		</field>
		<field n="systemType" id="67108997" t="t" mod="r0">
		</field>
		<field n="systemSpecifier" id="67108998" t="TGreenZoneParser.Parsers.Cs.SystemTypeSpecifierNode" mod="r0">
		</field>
		<constr id="100663576" mod="i">
			<param t="t" n="systemType">
			</param>
		</constr>
		<constr id="100663577" mod="i">
			<param t="TGreenZoneParser.Parsers.Cs.SystemTypeSpecifierNode" n="systemSpecifier">
			</param>
		</constr>
		<constr id="100663580" mod="s0">
		</constr>
		<prop n="SystemType" id="385876064" t="t" r="True" w="False" mod="P">
		</prop>
		<prop n="SystemSpecifier" id="385876065" t="TGreenZoneParser.Parsers.Cs.SystemTypeSpecifierNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TCompiledResolvedType" ns="GreenZoneParser.Parsers.Cs" id="33554474" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ResolvedType" id="33554472"/>
		<field n="compiledType" id="67108999" t="TGreenZoneParser.Parsers.Cs.UserTypeSpecifierNode" mod="r0">
		</field>
		<constr id="100663581" mod="i">
			<param t="TGreenZoneParser.Parsers.Cs.UserTypeSpecifierNode" n="compiledType">
			</param>
		</constr>
		<prop n="CompiledType" id="385876066" t="TGreenZoneParser.Parsers.Cs.UserTypeSpecifierNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TBreakStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554475" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100663583" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TParser" ns="GreenZoneParser" id="33554476" mod="aP" t="cl">
		<type n="TGreenZoneParser.Parser+TTokenEventHandler" ns="GreenZoneParser" id="33554477" mod="eP" t="de">
			<base-t n="TSystem.MulticastDelegate" id="33554454"/>
			<constr id="100663623" mod="P">
				<param t="O" n="object">
				</param>
				<param t="p" n="method">
				</param>
			</constr>
			<method n="TInvoke" id="100663624" rt="v" mod="vP">
				<param t="TGreenZoneParser.Lexer.Token" n="token">
				</param>
				<param t="b" n="sync">
				</param>
			</method>
			<method n="TBeginInvoke" id="100663625" rt="TSystem.IAsyncResult" mod="vP">
				<param t="TGreenZoneParser.Lexer.Token" n="token">
				</param>
				<param t="b" n="sync">
				</param>
				<param t="TSystem.AsyncCallback" n="callback">
				</param>
				<param t="O" n="object">
				</param>
			</method>
			<method n="TEndInvoke" id="100663626" rt="v" mod="vP">
				<param t="TSystem.IAsyncResult" n="result">
				</param>
			</method>
		</type>
		<type n="TGreenZoneParser.Parser+TTokenPosEventHandler" ns="GreenZoneParser" id="33554478" mod="eP" t="de">
			<base-t n="TSystem.MulticastDelegate" id="33554454"/>
			<constr id="100663627" mod="P">
				<param t="O" n="object">
				</param>
				<param t="p" n="method">
				</param>
			</constr>
			<method n="TInvoke" id="100663628" rt="v" mod="vP">
				<param t="n" n="position">
				</param>
				<param t="b" n="sync">
				</param>
			</method>
			<method n="TBeginInvoke" id="100663629" rt="TSystem.IAsyncResult" mod="vP">
				<param t="n" n="position">
				</param>
				<param t="b" n="sync">
				</param>
				<param t="TSystem.AsyncCallback" n="callback">
				</param>
				<param t="O" n="object">
				</param>
			</method>
			<method n="TEndInvoke" id="100663630" rt="v" mod="vP">
				<param t="TSystem.IAsyncResult" n="result">
				</param>
			</method>
		</type>
		<type n="TGreenZoneParser.Parser+TErrorEventHandler" ns="GreenZoneParser" id="33554479" mod="eP" t="de">
			<base-t n="TSystem.MulticastDelegate" id="33554454"/>
			<constr id="100663631" mod="P">
				<param t="O" n="object">
				</param>
				<param t="p" n="method">
				</param>
			</constr>
			<method n="TInvoke" id="100663632" rt="v" mod="vP">
				<param t="X" n="info">
				</param>
				<param t="TGreenZoneParser.CompilationErrorEnty" n="err">
				</param>
				<param t="b" n="sync">
				</param>
			</method>
			<method n="TBeginInvoke" id="100663633" rt="TSystem.IAsyncResult" mod="vP">
				<param t="X" n="info">
				</param>
				<param t="TGreenZoneParser.CompilationErrorEnty" n="err">
				</param>
				<param t="b" n="sync">
				</param>
				<param t="TSystem.AsyncCallback" n="callback">
				</param>
				<param t="O" n="object">
				</param>
			</method>
			<method n="TEndInvoke" id="100663634" rt="v" mod="vP">
				<param t="TSystem.IAsyncResult" n="result">
				</param>
			</method>
		</type>
		<type n="TGreenZoneParser.Parser+TNodeEventHandler" ns="GreenZoneParser" id="33554480" mod="eP" t="de">
			<base-t n="TSystem.MulticastDelegate" id="33554454"/>
			<constr id="100663635" mod="P">
				<param t="O" n="object">
				</param>
				<param t="p" n="method">
				</param>
			</constr>
			<method n="TInvoke" id="100663636" rt="v" mod="vP">
				<param t="TGreenZoneParser.Parsers.BaseNode" n="child">
				</param>
				<param t="b" n="sync">
				</param>
			</method>
			<method n="TBeginInvoke" id="100663637" rt="TSystem.IAsyncResult" mod="vP">
				<param t="TGreenZoneParser.Parsers.BaseNode" n="child">
				</param>
				<param t="b" n="sync">
				</param>
				<param t="TSystem.AsyncCallback" n="callback">
				</param>
				<param t="O" n="object">
				</param>
			</method>
			<method n="TEndInvoke" id="100663638" rt="v" mod="vP">
				<param t="TSystem.IAsyncResult" n="result">
				</param>
			</method>
		</type>
		<type n="TGreenZoneParser.Parser+TPos" ns="GreenZoneParser" id="33554481" mod="eP" t="st">
			<base-t n="TSystem.ValueType" id="33554441"/>
			<field n="Line" id="67109016" t="n" mod="rP">
			</field>
			<field n="Column" id="67109017" t="n" mod="rP">
			</field>
			<constr id="100663639" mod="i">
				<param t="n" n="line">
				</param>
				<param t="n" n="column">
				</param>
			</constr>
		</type>
		<field n="TokenRead" id="67109000" t="TGreenZoneParser.Parser+TTokenPosEventHandler" mod="0">
		</field>
		<field n="TokenAdded" id="67109001" t="TGreenZoneParser.Parser+TTokenEventHandler" mod="0">
		</field>
		<field n="ErrorAdded" id="67109002" t="TGreenZoneParser.Parser+TErrorEventHandler" mod="0">
		</field>
		<field n="NewLineAdded" id="67109003" t="TGreenZoneParser.Parser+TTokenPosEventHandler" mod="0">
		</field>
		<field n="TmpErrorsAdded" id="67109004" t="TGreenZoneParser.Parser+TErrorEventHandler" mod="0">
		</field>
		<field n="NodeCreated" id="67109005" t="TGreenZoneParser.Parser+TNodeEventHandler" mod="0">
		</field>
		<field n="NodeAdded" id="67109006" t="TGreenZoneParser.Parser+TNodeEventHandler" mod="0">
		</field>
		<field n="parserThread" id="67109007" t="TSystem.Threading.Thread" mod="p">
		</field>
		<field n="threadLock" id="67109008" t="O" mod="rp">
		</field>
		<field n="parseNextPosition" id="67109009" t="n" mod="p">
		</field>
		<field n="stepThroughTokenizer" id="67109010" t="b" mod="p">
		</field>
		<field n="fileContent" id="67109011" t="X" mod="rp">
		</field>
		<field n="fileName" id="67109012" t="X" mod="r0">
		</field>
		<field n="newLinePositions" id="67109013" t="G1nSystem.Collections.Generic.SortedSet" mod="r0">
		</field>
		<field n="compilationErrors" id="67109014" t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="lastPosition" id="67109015" t="n" mod="p">
		</field>
		<method n="Tadd_TokenRead" id="100663584" rt="v" mod="P">
			<param t="TGreenZoneParser.Parser+TTokenPosEventHandler" n="value">
			</param>
		</method>
		<method n="Tremove_TokenRead" id="100663585" rt="v" mod="P">
			<param t="TGreenZoneParser.Parser+TTokenPosEventHandler" n="value">
			</param>
		</method>
		<method n="Tadd_TokenAdded" id="100663586" rt="v" mod="P">
			<param t="TGreenZoneParser.Parser+TTokenEventHandler" n="value">
			</param>
		</method>
		<method n="Tremove_TokenAdded" id="100663587" rt="v" mod="P">
			<param t="TGreenZoneParser.Parser+TTokenEventHandler" n="value">
			</param>
		</method>
		<method n="Tadd_ErrorAdded" id="100663588" rt="v" mod="P">
			<param t="TGreenZoneParser.Parser+TErrorEventHandler" n="value">
			</param>
		</method>
		<method n="Tremove_ErrorAdded" id="100663589" rt="v" mod="P">
			<param t="TGreenZoneParser.Parser+TErrorEventHandler" n="value">
			</param>
		</method>
		<method n="Tadd_NewLineAdded" id="100663590" rt="v" mod="P">
			<param t="TGreenZoneParser.Parser+TTokenPosEventHandler" n="value">
			</param>
		</method>
		<method n="Tremove_NewLineAdded" id="100663591" rt="v" mod="P">
			<param t="TGreenZoneParser.Parser+TTokenPosEventHandler" n="value">
			</param>
		</method>
		<method n="Tadd_TmpErrorsAdded" id="100663592" rt="v" mod="P">
			<param t="TGreenZoneParser.Parser+TErrorEventHandler" n="value">
			</param>
		</method>
		<method n="Tremove_TmpErrorsAdded" id="100663593" rt="v" mod="P">
			<param t="TGreenZoneParser.Parser+TErrorEventHandler" n="value">
			</param>
		</method>
		<method n="Tadd_NodeCreated" id="100663594" rt="v" mod="P">
			<param t="TGreenZoneParser.Parser+TNodeEventHandler" n="value">
			</param>
		</method>
		<method n="Tremove_NodeCreated" id="100663595" rt="v" mod="P">
			<param t="TGreenZoneParser.Parser+TNodeEventHandler" n="value">
			</param>
		</method>
		<method n="Tadd_NodeAdded" id="100663596" rt="v" mod="P">
			<param t="TGreenZoneParser.Parser+TNodeEventHandler" n="value">
			</param>
		</method>
		<method n="Tremove_NodeAdded" id="100663597" rt="v" mod="P">
			<param t="TGreenZoneParser.Parser+TNodeEventHandler" n="value">
			</param>
		</method>
		<constr id="100663598" mod="P">
			<param t="X" n="fileName">
			</param>
			<param t="X" n="fileContent">
			</param>
		</constr>
		<method n="TGetContent" id="100663605" rt="X" mod="P">
			<param t="n" n="startIndex">
			</param>
			<param t="n" n="endIndex">
			</param>
		</method>
		<method n="TAddNewLine" id="100663606" rt="v" mod="i">
		</method>
		<method n="TCreateError" id="100663607" rt="TGreenZoneParser.CompilationErrorEnty" mod="i">
			<param t="X" n="error">
			</param>
			<param t="n" n="tokenStart">
			</param>
			<param t="n" n="tokenEnd">
			</param>
		</method>
		<method n="TAddError" id="100663608" rt="TGreenZoneParser.CompilationErrorEnty" mod="i">
			<param t="X" n="error">
			</param>
			<param t="n" n="tokenStart">
			</param>
			<param t="n" n="tokenEnd">
			</param>
		</method>
		<method n="TAddError" id="100663609" rt="v" mod="i">
			<param t="TGreenZoneParser.CompilationErrorEnty" n="e">
			</param>
		</method>
		<method n="TParse" id="100663610" rt="TGreenZoneParser.Parsers.BaseNode" mod="aP">
		</method>
		<method n="TParseNext" id="100663611" rt="v" mod="P">
		</method>
		<method n="TParseToPosition" id="100663612" rt="v" mod="P">
			<param t="n" n="parseNextPosition">
			</param>
		</method>
		<method n="TTokenizeAllFirst" id="100663613" rt="v" mod="P">
		</method>
		<method n="TParse0" id="100663614" rt="v" mod="0">
		</method>
		<method n="TFindPos" id="100663615" rt="TGreenZoneParser.Parser+TPos" mod="P">
			<param t="n" n="filePosition">
			</param>
		</method>
		<method n="TRaiseTokenRead" id="100663616" rt="v" mod="i">
		</method>
		<method n="TRaiseTokenAdded" id="100663617" rt="v" mod="i">
			<param t="TGreenZoneParser.Lexer.Token" n="token">
			</param>
		</method>
		<method n="TRaiseErrorAdded" id="100663618" rt="v" mod="0">
			<param t="TGreenZoneParser.CompilationErrorEnty" n="e">
			</param>
		</method>
		<method n="TRaiseNewLineAdded" id="100663619" rt="v" mod="0">
		</method>
		<method n="TRaiseTmpErrorAdded" id="100663620" rt="v" mod="i">
			<param t="X" n="info">
			</param>
			<param t="TGreenZoneParser.CompilationErrorEnty" n="err">
			</param>
		</method>
		<method n="TRaiseNodeCreated" id="100663621" rt="v" mod="i">
			<param t="TGreenZoneParser.Parsers.BaseNode" n="child">
			</param>
		</method>
		<method n="TRaiseNodeAdded" id="100663622" rt="v" mod="i">
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="node">
			</param>
		</method>
		<event n="TokenRead" id="335544322" t="TGreenZoneParser.Parser+TTokenPosEventHandler" mod="P">
		</event>
		<event n="TokenAdded" id="335544323" t="TGreenZoneParser.Parser+TTokenEventHandler" mod="P">
		</event>
		<event n="ErrorAdded" id="335544324" t="TGreenZoneParser.Parser+TErrorEventHandler" mod="P">
		</event>
		<event n="NewLineAdded" id="335544325" t="TGreenZoneParser.Parser+TTokenPosEventHandler" mod="P">
		</event>
		<event n="TmpErrorsAdded" id="335544326" t="TGreenZoneParser.Parser+TErrorEventHandler" mod="P">
		</event>
		<event n="NodeCreated" id="335544327" t="TGreenZoneParser.Parser+TNodeEventHandler" mod="P">
		</event>
		<event n="NodeAdded" id="335544328" t="TGreenZoneParser.Parser+TNodeEventHandler" mod="P">
		</event>
		<prop n="Tokenizer" id="385876067" t="TGreenZoneParser.Tokenizer" r="True" w="False" mod="aP">
		</prop>
		<prop n="FileContent" id="385876068" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="FileName" id="385876069" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="NewLinePositions" id="385876070" t="G1nSystem.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="CompilationErrors" id="385876071" t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="LastPosition" id="385876072" t="n" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TXmlParser" ns="GreenZoneParser.Xml" id="33554482" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parser" id="33554476"/>
		<type n="TGreenZoneParser.Xml.XmlParser+TState" ns="GreenZoneParser.Xml" id="33554483" mod="e0" t="en">
			<base n="n" id="33554686"/>
			<item n="TagOpen" v="0"/>
			<item n="TagNameOrSlashBegin" v="1"/>
			<item n="TagNameAfterSlash" v="2"/>
			<item n="AttributeOrSlashOrClose" v="3"/>
			<item n="AssignAfterAttributeName" v="4"/>
			<item n="LiteralAfterAssign" v="5"/>
			<item n="TagCloseAfterSlash" v="6"/>
		</type>
		<field n="currentTagIsCloseBegin" id="67109018" t="b" mod="0">
		</field>
		<field n="currentTagIsSingle" id="67109019" t="b" mod="0">
		</field>
		<field n="currentTagStart" id="67109020" t="TGreenZoneParser.Lexer.Token" mod="0">
		</field>
		<field n="currentTagName" id="67109021" t="X" mod="0">
		</field>
		<field n="currentAttributeName" id="67109022" t="X" mod="0">
		</field>
		<field n="currentAttributeValue" id="67109023" t="O" mod="0">
		</field>
		<field n="currentAttrs" id="67109024" t="G2XOSystem.Collections.Generic.Dictionary" mod="0">
		</field>
		<field n="technicalRootNode" id="67109025" t="TGreenZoneParser.Xml.XmlNode" mod="0">
		</field>
		<field n="current" id="67109026" t="TGreenZoneParser.Xml.XmlNode" mod="0">
		</field>
		<field n="tokenizer" id="67109027" t="TGreenZoneParser.Xml.XmlTokenizer" mod="r0">
		</field>
		<field n="rootNodes" id="67109028" t="G1TGreenZoneParser.Xml.XmlNode;System.Collections.Generic.List" mod="0">
		</field>
		<constr id="100663640" mod="P">
			<param t="X" n="fileName">
			</param>
			<param t="X" n="fileContent">
			</param>
		</constr>
		<method n="TParse" id="100663641" rt="TGreenZoneParser.Parsers.BaseNode" mod="oP">
		</method>
		<method n="Treset" id="100663642" rt="v" mod="0">
		</method>
		<prop n="Tokenizer" id="385876073" t="TGreenZoneParser.Tokenizer" r="True" w="False" mod="oP">
		</prop>
		<prop n="RootNodes" id="385876074" t="G1TGreenZoneParser.Xml.XmlNode;System.Collections.Generic.List" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflPropertyGet" ns="GreenZoneParser.Reflect" id="33554484" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflMethodBase" id="33554466"/>
		<field n="parent" id="67109038" t="TGreenZoneParser.Reflect.ReflProperty" mod="r0">
		</field>
		<constr id="100663646" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflProperty" n="parent">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
		</constr>
		<prop n="TypeId" id="385876075" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="Parent" id="385876076" t="TGreenZoneParser.Reflect.ReflProperty" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflMethodArgType" ns="GreenZoneParser.Reflect" id="33554485" mod="eP" t="en">
		<base n="n" id="33554686"/>
		<item n="Value" v="0"/>
		<item n="Ref" v="1"/>
		<item n="Out" v="2"/>
		<item n="This" v="3"/>
		<item n="Params" v="4"/>
	</type>
	<type n="TReflMethodArgDefinition" ns="GreenZoneParser.Reflect" id="33554486" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflBaseNode" id="33554463"/>
		<field n="methodParameterName" id="67109045" t="X" mod="r0">
		</field>
		<field n="parameterType" id="67109046" t="TGreenZoneParser.Reflect.ReflType" mod="r0">
		</field>
		<field n="argType" id="67109047" t="TGreenZoneParser.Reflect.ReflMethodArgType" mod="r0">
		</field>
		<field n="attributes" id="67109048" t="A1TGreenZoneParser.Reflect.ReflAttribute;" mod="r0">
		</field>
		<constr id="100663649" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflType" n="parameterType">
			</param>
			<param t="X" n="methodParameterName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflMethodArgType" n="argType">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes" p="Params">
				<attrs>
					<attr t="aSystem.ParamArrayAttribute" constr="100667008">
					</attr>
				</attrs>
			</param>
		</constr>
		<prop n="TypeId" id="385876077" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="MethodParameterName" id="385876078" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="ParameterType" id="385876079" t="TGreenZoneParser.Reflect.ReflType" r="True" w="False" mod="P">
		</prop>
		<prop n="ArgType" id="385876080" t="TGreenZoneParser.Reflect.ReflMethodArgType" r="True" w="False" mod="P">
		</prop>
		<prop n="Attributes" id="385876081" t="A1TGreenZoneParser.Reflect.ReflAttribute;" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TUsingDeclStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554487" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<field n="name" id="67109049" t="X" mod="r0">
		</field>
		<field n="identifierTokens" id="67109050" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="identifierTokensUm" id="67109051" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100663655" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" n="identifierTokens">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="Name" id="385876082" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="IdentifierTokens" id="385876083" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TTryStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554488" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100663658" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TUnaryOperationNode" ns="GreenZoneParser.Parsers.Cs" id="33554489" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="operatorToken" id="67109052" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="right" id="67109053" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<field n="validStatement" id="67109054" t="b" mod="0">
		</field>
		<constr id="100663659" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="operatorToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="right">
			</param>
		</constr>
		<prop n="LeftSideOperator" id="385876084" t="b" r="True" w="False" mod="P">
		</prop>
		<prop n="OperatorToken" id="385876085" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="Right" id="385876086" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="ValidStatement" id="385876087" t="b" r="True" w="False" mod="oP">
		</prop>
	</type>
	<type n="TBaseMethodStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554490" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<field n="typeExpression" id="67109055" t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" mod="r0">
		</field>
		<field n="methodId" id="67109056" t="X" mod="r0">
		</field>
		<field n="identifierTokens" id="67109057" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="ri">
		</field>
		<field n="identifierTokensUm" id="67109058" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="parens" id="67109059" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="rp">
		</field>
		<field n="argumentList" id="67109060" t="G1TGreenZoneParser.Parsers.Cs.VarDeclArgumentNode;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="argumentListUm" id="67109061" t="G1TGreenZoneParser.Parsers.Cs.VarDeclArgumentNode;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100663664" mod="P">
			<param t="TGreenZoneParser.Parsers.StatementId" n="statementId">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" n="typeExpression">
			</param>
			<param t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" n="identifierTokens">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="parens">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.VarDeclArgumentNode;System.Collections.Generic.List" n="argumentList">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="TypeExpression" id="385876088" t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" r="True" w="False" mod="P">
		</prop>
		<prop n="MethodId" id="385876089" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="IdentifierTokens" id="385876090" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Parens" id="385876091" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="ArgumentList" id="385876092" t="G1TGreenZoneParser.Parsers.Cs.VarDeclArgumentNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TPropertyGetDefStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554491" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.BaseMethodStatementNode" id="33554490"/>
		<constr id="100663670" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="identifierToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TReflTypeId" ns="GreenZoneParser.Reflect" id="33554492" mod="eP" t="en">
		<base n="n" id="33554686"/>
		<item n="ArrayType" v="0"/>
		<item n="Attribute" v="1"/>
		<item n="AttributeArg" v="2"/>
		<item n="ClassType" v="3"/>
		<item n="Constructor" v="4"/>
		<item n="DelegateType" v="5"/>
		<item n="EnumConstant" v="6"/>
		<item n="EnumType" v="7"/>
		<item n="Event" v="8"/>
		<item n="EventAdd" v="9"/>
		<item n="EventRemove" v="10"/>
		<item n="Field" v="11"/>
		<item n="GenericTypeArg" v="12"/>
		<item n="IndexerGet" v="13"/>
		<item n="IndexerProperty" v="14"/>
		<item n="IndexerSet" v="15"/>
		<item n="InterfaceType" v="16"/>
		<item n="Method" v="17"/>
		<item n="MethodArg" v="18"/>
		<item n="MethodArgDefinition" v="19"/>
		<item n="PointerType" v="20"/>
		<item n="PrimitiveType" v="21"/>
		<item n="Property" v="22"/>
		<item n="PropertyGet" v="23"/>
		<item n="PropertySet" v="24"/>
		<item n="StructType" v="25"/>
		<item n="TypeArg" v="26"/>
		<item n="TypeArgDefinition" v="27"/>
		<item n="TypeArgRule" v="28"/>
	</type>
	<type n="TReflPrimitiveType" ns="GreenZoneParser.Reflect" id="33554493" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflType" id="33554468"/>
		<constr id="100663671" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="X" n="namespaceId">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<constr id="100663672" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<prop n="TypeId" id="385876093" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
	</type>
	<type n="TReflCallableType" ns="GreenZoneParser.Reflect" id="33554494" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflType" id="33554468"/>
		<field n="genericTypeArgDefs" id="67109092" t="G1TGreenZoneParser.Reflect.ReflTypeArgDefinition;System.Collections.Generic.List" mod="rp">
		</field>
		<field n="genericTypeArgDefsUm" id="67109093" t="G1TGreenZoneParser.Reflect.ReflTypeArgDefinition;System.Collections.Generic.IList" mod="rp">
		</field>
		<field n="genericTypeArgs" id="67109094" t="G1TGreenZoneParser.Reflect.ReflTypeArg;System.Collections.Generic.List" mod="rp">
		</field>
		<field n="genericTypeArgsUm" id="67109095" t="G1TGreenZoneParser.Reflect.ReflTypeArg;System.Collections.Generic.IList" mod="rp">
		</field>
		<constr id="100663674" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="X" n="namespaceId">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<constr id="100663675" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<constr id="100663676" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="X" n="namespaceId">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="G1TGreenZoneParser.Reflect.ReflTypeArgDefinition;System.Collections.Generic.List" n="genericTypeArgDefs">
			</param>
		</constr>
		<constr id="100663677" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="G1TGreenZoneParser.Reflect.ReflTypeArgDefinition;System.Collections.Generic.List" n="genericTypeArgDefs">
			</param>
		</constr>
		<method n="TAddTypeArgDefinition" id="100663681" rt="v" mod="i">
			<param t="TGreenZoneParser.Reflect.ReflTypeArgDefinition" n="genericTypeArgDef">
			</param>
		</method>
		<method n="TApplyGenericArgs" id="100663682" rt="TGreenZoneParser.Reflect.ReflCallableType" mod="ai">
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflTypeArg;" n="genericTypeArgs">
			</param>
		</method>
		<prop n="GenericTypeArgDefs" id="385876094" t="G1TGreenZoneParser.Reflect.ReflTypeArgDefinition;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="GenericTypeArgs" id="385876095" t="G1TGreenZoneParser.Reflect.ReflTypeArg;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Name" id="385876096" t="X" r="True" w="False" mod="oP">
		</prop>
	</type>
	<type n="TReflObjType" ns="GreenZoneParser.Reflect" id="33554495" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflCallableType" id="33554494"/>
		<field n="members" id="67109096" t="G1TGreenZoneParser.Reflect.ReflMember;System.Collections.Generic.List" mod="rp">
		</field>
		<field n="membersUm" id="67109097" t="G1TGreenZoneParser.Reflect.ReflMember;System.Collections.Generic.IList" mod="rp">
		</field>
		<field n="baseInterfaces" id="67109098" t="G1TGreenZoneParser.Reflect.ReflInterfaceType;System.Collections.Generic.List" mod="rp">
		</field>
		<field n="baseInterfacesUm" id="67109099" t="G1TGreenZoneParser.Reflect.ReflInterfaceType;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100663683" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="X" n="namespaceId">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<constr id="100663684" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<method n="TAddMember" id="100663687" rt="v" mod="vi">
			<param t="TGreenZoneParser.Reflect.ReflMember" n="member">
			</param>
		</method>
		<method n="TAddBaseInterface" id="100663688" rt="v" mod="i">
			<param t="TGreenZoneParser.Reflect.ReflInterfaceType" n="baseIf">
			</param>
		</method>
		<method n="TMemberById" id="100663689" rt="TGreenZoneParser.Reflect.ReflMember" mod="P">
			<param t="X" n="id">
			</param>
		</method>
		<prop n="Members" id="385876097" t="G1TGreenZoneParser.Reflect.ReflMember;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="BaseInterfaces" id="385876098" t="G1TGreenZoneParser.Reflect.ReflInterfaceType;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflDefType" ns="GreenZoneParser.Reflect" id="33554496" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflObjType" id="33554495"/>
		<constr id="100663690" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="X" n="namespaceId">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<constr id="100663691" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<method n="TAddMember" id="100663692" rt="v" mod="oi">
			<param t="TGreenZoneParser.Reflect.ReflMember" n="member">
			</param>
		</method>
	</type>
	<type n="TReflClassType" ns="GreenZoneParser.Reflect" id="33554497" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflDefType" id="33554496"/>
		<field n="baseClass" id="67109100" t="TGreenZoneParser.Reflect.ReflClassType" mod="r0">
		</field>
		<constr id="100663693" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="X" n="namespaceId">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflClassType" n="baseClass">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<constr id="100663694" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflClassType" n="baseClass">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<method n="TApplyGenericArgs" id="100663697" rt="TGreenZoneParser.Reflect.ReflCallableType" mod="oi">
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflTypeArg;" n="genericTypeArgs">
			</param>
		</method>
		<prop n="TypeId" id="385876099" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="BaseClass" id="385876100" t="TGreenZoneParser.Reflect.ReflClassType" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflDelegateType" ns="GreenZoneParser.Reflect" id="33554498" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflCallableType" id="33554494"/>
		<field n="invokeMethod" id="67109101" t="TGreenZoneParser.Reflect.ReflMethod" mod="rp">
		</field>
		<constr id="100663698" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="X" n="namespaceId">
			</param>
			<param t="X" n="name">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflMethod" n="invokeMethod">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<constr id="100663699" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="X" n="name">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflMethod" n="invokeMethod">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<method n="TApplyGenericArgs" id="100663702" rt="TGreenZoneParser.Reflect.ReflCallableType" mod="oi">
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflTypeArg;" n="genericTypeArgs">
			</param>
		</method>
		<prop n="TypeId" id="385876101" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="InvokeMethod" id="385876102" t="TGreenZoneParser.Reflect.ReflMethod" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflIndexerSet" ns="GreenZoneParser.Reflect" id="33554499" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflMethodBase" id="33554466"/>
		<field n="parent" id="67109102" t="TGreenZoneParser.Reflect.ReflIndexerProperty" mod="r0">
		</field>
		<constr id="100663703" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflIndexerProperty" n="parent">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
		</constr>
		<prop n="TypeId" id="385876103" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="Parent" id="385876104" t="TGreenZoneParser.Reflect.ReflIndexerProperty" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TEventDeclStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554500" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<field n="varDeclHeader" id="67109103" t="TGreenZoneParser.Parsers.Cs.VarDeclStatementNode" mod="r0">
		</field>
		<constr id="100663706" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.VarDeclStatementNode" n="varDeclHeader">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="VarDeclHeader" id="385876105" t="TGreenZoneParser.Parsers.Cs.VarDeclStatementNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TCheckedStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554501" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100663708" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TLinqFootExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554502" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<constr id="100663709" mod="P">
			<param t="TGreenZoneParser.Parsers.StatementId" n="id">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TLinqGroupByExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554503" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.LinqFootExpressionNode" id="33554502"/>
		<field n="groupExpression" id="67109104" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<field n="byExpression" id="67109105" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100663710" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="groupExpression">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="byExpression">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="GroupExpression" id="385876106" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="ByExpression" id="385876107" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TSingleLineCommentTokenRule" ns="GreenZoneParser.Lexer" id="33554504" mod="" t="cl">
		<base-t n="TGreenZoneParser.Lexer.TokenRule" id="33554436"/>
		<type n="TGreenZoneParser.Lexer.SingleLineCommentTokenRule+TSingleLineCommentMatchState" ns="GreenZoneParser.Lexer" id="33554505" mod="e0" t="en">
			<base n="n" id="33554686"/>
			<item n="NORMAL" v="0"/>
			<item n="AFTER_BEGIN" v="1"/>
		</type>
		<field n="state" id="67109106" t="TGreenZoneParser.Lexer.SingleLineCommentTokenRule+TSingleLineCommentMatchState" mod="0">
		</field>
		<constr id="100663713" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
		</constr>
		<method n="TReset" id="100663714" rt="v" mod="oi">
		</method>
		<method n="TApply" id="100663715" rt="v" mod="oi">
			<param t="c" n="ch">
			</param>
			<param t="c" n="next_ch">
			</param>
		</method>
	</type>
	<type n="TXmlNode" ns="GreenZoneParser.Xml" id="33554506" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.BaseNode" id="33554444"/>
		<field n="openTag" id="67109110" t="TGreenZoneParser.Xml.XmlTag" mod="r0">
		</field>
		<field n="closeTag" id="67109111" t="TGreenZoneParser.Xml.XmlTag" mod="0">
		</field>
		<field n="children" id="67109112" t="G1TGreenZoneParser.Xml.XmlNode;System.Collections.Generic.List" mod="ri">
		</field>
		<field n="childrenUm" id="67109113" t="G1TGreenZoneParser.Xml.XmlNode;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100663716" mod="i">
			<param t="TGreenZoneParser.Xml.XmlParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Xml.XmlTag" n="openTag">
			</param>
		</constr>
		<prop n="Parent" id="385876108" t="TGreenZoneParser.Xml.XmlNode" r="True" w="False" mod="P">
		</prop>
		<prop n="OpenTag" id="385876109" t="TGreenZoneParser.Xml.XmlTag" r="True" w="False" mod="P">
		</prop>
		<prop n="CloseTag" id="385876110" t="TGreenZoneParser.Xml.XmlTag" r="True" w="True" mod="P" set-mod="i">
		</prop>
		<prop n="Children" id="385876111" t="G1TGreenZoneParser.Xml.XmlNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflMethodBaseGen" ns="GreenZoneParser.Reflect" id="33554507" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflMethodBase" id="33554466"/>
		<field n="genericTypeArgDefs" id="67109114" t="G1TGreenZoneParser.Reflect.ReflTypeArgDefinition;System.Collections.Generic.List" mod="ri">
		</field>
		<field n="genericTypeArgDefsUm" id="67109115" t="G1TGreenZoneParser.Reflect.ReflTypeArgDefinition;System.Collections.Generic.IList" mod="rp">
		</field>
		<field n="genericTypeArgs" id="67109116" t="G1TGreenZoneParser.Reflect.ReflTypeArg;System.Collections.Generic.List" mod="rp">
		</field>
		<field n="genericTypeArgsUm" id="67109117" t="G1TGreenZoneParser.Reflect.ReflTypeArg;System.Collections.Generic.IList" mod="rp">
		</field>
		<constr id="100663722" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflCallableType" n="declaringType">
			</param>
			<param t="X" n="methodName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflMethodArgDefinition;" n="methodArgs" p="Params">
				<attrs>
					<attr t="aSystem.ParamArrayAttribute" constr="100667008">
					</attr>
				</attrs>
			</param>
		</constr>
		<method n="TAddTypeArgDefinition" id="100663725" rt="v" mod="i">
			<param t="TGreenZoneParser.Reflect.ReflTypeArgDefinition" n="genericTypeArgDef">
			</param>
		</method>
		<prop n="GenericTypeArgDefs" id="385876112" t="G1TGreenZoneParser.Reflect.ReflTypeArgDefinition;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="GenericTypeArgs" id="385876113" t="G1TGreenZoneParser.Reflect.ReflTypeArg;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TUnknownStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554508" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100663726" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TObjectCreationNode" ns="GreenZoneParser.Parsers.Cs" id="33554509" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="typeExpression" id="67109118" t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" mod="r0">
		</field>
		<field n="newToken" id="67109119" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="parens" id="67109120" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="r0">
		</field>
		<field n="argumentList" id="67109121" t="G1TGreenZoneParser.Parsers.Cs.ArgumentNode;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="argumentListUm" id="67109122" t="G1TGreenZoneParser.Parsers.Cs.ArgumentNode;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100663727" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" n="typeExpression">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="newToken">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="parens">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ArgumentNode;System.Collections.Generic.List" n="argumentList">
			</param>
		</constr>
		<prop n="TypeExpression" id="385876114" t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" r="True" w="False" mod="P">
		</prop>
		<prop n="NewToken" id="385876115" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="Parens" id="385876116" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="ArgumentList" id="385876117" t="G1TGreenZoneParser.Parsers.Cs.ArgumentNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="ValidStatement" id="385876118" t="b" r="True" w="False" mod="oP">
		</prop>
	</type>
	<type n="TBinaryOperationNode" ns="GreenZoneParser.Parsers.Cs" id="33554510" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="operatorToken" id="67109123" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="left" id="67109124" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<field n="right" id="67109125" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<field n="validStatement" id="67109126" t="b" mod="0">
		</field>
		<constr id="100663733" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="operatorToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="left">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="right">
			</param>
		</constr>
		<prop n="OperatorToken" id="385876119" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="Left" id="385876120" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="Right" id="385876121" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="ValidStatement" id="385876122" t="b" r="True" w="False" mod="oP">
		</prop>
	</type>
	<type n="TOperationAbortedException" ns="GreenZoneParser.Parsers" id="33554511" mod="" t="cl">
		<base-t n="TSystem.Exception" id="33554440"/>
		<constr id="100663738" mod="P">
		</constr>
	</type>
	<type n="TTesterGuiBinder" ns="GreenZoneParser" id="33554512" mod="a" t="cl">
		<type n="TGreenZoneParser.TesterGuiBinder+TSimpleDelegate" ns="GreenZoneParser" id="33554513" mod="e0" t="de">
			<base-t n="TSystem.MulticastDelegate" id="33554454"/>
			<constr id="100663792" mod="P">
				<param t="O" n="object">
				</param>
				<param t="p" n="method">
				</param>
			</constr>
			<method n="TInvoke" id="100663793" rt="v" mod="vP">
			</method>
			<method n="TBeginInvoke" id="100663794" rt="TSystem.IAsyncResult" mod="vP">
				<param t="TSystem.AsyncCallback" n="callback">
				</param>
				<param t="O" n="object">
				</param>
			</method>
			<method n="TEndInvoke" id="100663795" rt="v" mod="vP">
				<param t="TSystem.IAsyncResult" n="result">
				</param>
			</method>
		</type>
		<field n="childNodes" id="67109127" t="G2TGreenZoneParser.Parsers.BaseNode;TSystem.Windows.Forms.TreeNode;System.Collections.Generic.SortedDictionary" mod="rp">
		</field>
		<field n="tokenRows" id="67109128" t="G2TGreenZoneParser.Lexer.Token;TSystem.Windows.Forms.DataGridViewRow;System.Collections.Generic.SortedDictionary" mod="rp">
		</field>
		<field n="errorRows" id="67109129" t="G2TGreenZoneParser.CompilationErrorEnty;TSystem.Windows.Forms.DataGridViewRow;System.Collections.Generic.SortedDictionary" mod="rp">
		</field>
		<field n="pendingParseErrors" id="67109130" t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" mod="rp">
		</field>
		<field n="childPos" id="67109131" t="G1nSystem.Collections.Generic.List" mod="p">
		</field>
		<field n="tokenPos" id="67109132" t="G1nSystem.Collections.Generic.List" mod="p">
		</field>
		<field n="errorPos" id="67109133" t="G1nSystem.Collections.Generic.List" mod="p">
		</field>
		<field n="children" id="67109134" t="G1TGreenZoneParser.Parsers.BaseNode;System.Collections.Generic.List" mod="p">
		</field>
		<field n="tokens" id="67109135" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="p">
		</field>
		<field n="errors" id="67109136" t="G1TGreenZoneParser.CompilationErrorEnty;System.Collections.Generic.List" mod="p">
		</field>
		<field n="childControls" id="67109137" t="G1TSystem.Windows.Forms.TreeNode;System.Collections.Generic.HashSet" mod="p">
		</field>
		<field n="tokenControls" id="67109138" t="G1TSystem.Windows.Forms.DataGridViewRow;System.Collections.Generic.HashSet" mod="p">
		</field>
		<field n="errorControls" id="67109139" t="G1TSystem.Windows.Forms.DataGridViewRow;System.Collections.Generic.HashSet" mod="p">
		</field>
		<field n="fileTextBox" id="67109140" t="TSystem.Windows.Forms.TextBox" mod="p">
		</field>
		<field n="sourceTextBox" id="67109141" t="TGreenZoneParser.RichTextBoxEx" mod="p">
		</field>
		<field n="treeView1" id="67109142" t="TSystem.Windows.Forms.TreeView" mod="p">
		</field>
		<field n="tokensTable" id="67109143" t="TSystem.Windows.Forms.DataGridView" mod="p">
		</field>
		<field n="errorsTable" id="67109144" t="TSystem.Windows.Forms.DataGridView" mod="p">
		</field>
		<field n="posLabel" id="67109145" t="TSystem.Windows.Forms.Label" mod="p">
		</field>
		<field n="lineLabel" id="67109146" t="TSystem.Windows.Forms.Label" mod="p">
		</field>
		<field n="columnLabel" id="67109147" t="TSystem.Windows.Forms.Label" mod="p">
		</field>
		<field n="parser" id="67109148" t="TGreenZoneParser.Parser" mod="p">
		</field>
		<field n="_GoTo" id="67109149" t="b" mod="p">
		</field>
		<field n="_errorsTable_CellClick" id="67109150" t="TSystem.Windows.Forms.DataGridViewCellEventHandler" mod="p">
		</field>
		<field n="_errorsTable_SelectionChanged" id="67109151" t="TSystem.EventHandler" mod="p">
		</field>
		<field n="_tokensTable_CellClick" id="67109152" t="TSystem.Windows.Forms.DataGridViewCellEventHandler" mod="p">
		</field>
		<field n="_tokensTable_SelectionChanged" id="67109153" t="TSystem.EventHandler" mod="p">
		</field>
		<field n="_treeView1_AfterSelect" id="67109154" t="TSystem.Windows.Forms.TreeViewEventHandler" mod="p">
		</field>
		<field n="_treeView1_BeforeExpand" id="67109155" t="TSystem.Windows.Forms.TreeViewCancelEventHandler" mod="p">
		</field>
		<field n="_treeView1_Click" id="67109156" t="TSystem.EventHandler" mod="p">
		</field>
		<field n="_sourceTextBox_SelectionChanged" id="67109157" t="TSystem.EventHandler" mod="p">
		</field>
		<field n="changingTbls" id="67109158" t="b" mod="0">
		</field>
		<constr id="100663739" mod="i">
			<param t="TSystem.Windows.Forms.TextBox" n="fileTextBox">
			</param>
			<param t="TGreenZoneParser.RichTextBoxEx" n="sourceTextBox">
			</param>
			<param t="TSystem.Windows.Forms.TreeView" n="treeView1">
			</param>
			<param t="TSystem.Windows.Forms.DataGridView" n="tokensTable">
			</param>
			<param t="TSystem.Windows.Forms.DataGridView" n="errorsTable">
			</param>
			<param t="TSystem.Windows.Forms.Label" n="posLabel">
			</param>
			<param t="TSystem.Windows.Forms.Label" n="lineLabel">
			</param>
			<param t="TSystem.Windows.Forms.Label" n="columnLabel">
			</param>
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
		</constr>
		<method n="TDispose" id="100663740" rt="v" mod="i">
		</method>
		<method n="TClear" id="100663743" rt="v" mod="i">
		</method>
		<method n="TGenerateLists" id="100663744" rt="v" mod="i">
			<param t="b" n="tokens">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
			<param t="b" n="errors">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
			<param t="b" n="nodes">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
		</method>
		<method n="TClearPendingErrors" id="100663745" rt="v" mod="i">
		</method>
		<method n="TUpdateTables" id="100663746" rt="v" mod="i">
			<param t="b" n="tokens">
			</param>
		</method>
		<method n="TcontinueSelectTree" id="100663747" rt="v" mod="0">
		</method>
		<method n="TAddError" id="100663748" rt="n" mod="ai">
			<param t="TGreenZoneParser.CompilationErrorEnty" n="err">
			</param>
			<param t="b" n="pending">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
		</method>
		<method n="TAddToken" id="100663749" rt="TGreenZoneParser.Parser+TPos" mod="i">
			<param t="TGreenZoneParser.Lexer.Token" n="token">
			</param>
		</method>
		<method n="TCreateGuiNode0" id="100663750" rt="TSystem.Windows.Forms.TreeNode" mod="i">
			<param t="TGreenZoneParser.Parsers.BaseNode" n="node">
			</param>
			<param t="X" n="title">
			</param>
		</method>
		<method n="TCreateGuiNode" id="100663751" rt="TSystem.Windows.Forms.TreeNode" mod="i">
			<param t="TGreenZoneParser.Parsers.Cs.MainBlockNode" n="node">
			</param>
		</method>
		<method n="TCreateGuiNode" id="100663752" rt="TSystem.Windows.Forms.TreeNode" mod="i">
			<param t="TGreenZoneParser.Xml.XmlNode" n="node">
			</param>
		</method>
		<method n="TCreateGuiNode" id="100663753" rt="TSystem.Windows.Forms.TreeNode" mod="i">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="node">
			</param>
			<param t="X" n="title">
			</param>
		</method>
		<method n="TCreateGuiNode" id="100663754" rt="TSystem.Windows.Forms.TreeNode" mod="i">
			<param t="TGreenZoneParser.Reflect.ReflBaseNode" n="node">
			</param>
			<param t="X" n="title">
			</param>
		</method>
		<method n="TAddTextNode" id="100663755" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNode" n="parentTn">
			</param>
			<param t="X" n="title">
			</param>
		</method>
		<method n="TAddBlockNode" id="100663756" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNodeCollection" n="parentTnNodes">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="node">
			</param>
			<param t="X" n="title">
			</param>
		</method>
		<method n="TAddStatementNode" id="100663757" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNodeCollection" n="parentTnNodes">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="node">
			</param>
			<param t="X" n="title">
			</param>
		</method>
		<method n="TAddXmlNode" id="100663758" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNodeCollection" n="parentTnNodes">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="node">
			</param>
			<param t="X" n="title">
			</param>
		</method>
		<method n="TAddXmlTag" id="100663759" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNodeCollection" n="parentTnNodes">
			</param>
			<param t="TGreenZoneParser.Xml.XmlTag" n="node">
			</param>
			<param t="X" n="title">
			</param>
		</method>
		<method n="TAddParseInfo" id="100663760" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNodeCollection" n="parentTnNodes">
			</param>
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="node">
			</param>
			<param t="X" n="title">
			</param>
		</method>
		<method n="TAddAttributeConstArg" id="100663761" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNodeCollection" n="parentTnNodes">
			</param>
			<param t="TGreenZoneParser.Reflect.AttributeConstrArg" n="node">
			</param>
			<param t="X" n="title">
			</param>
		</method>
		<method n="TAddGenericConstraint" id="100663762" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNodeCollection" n="parentTnNodes">
			</param>
			<param t="TGreenZoneParser.Reflect.GenericConstraint" n="node">
			</param>
			<param t="X" n="title">
			</param>
		</method>
		<method n="TAddReflNode" id="100663763" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNodeCollection" n="parentTnNodes">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflBaseNode" n="node">
			</param>
			<param t="X" n="title">
			</param>
		</method>
		<method n="TAddParseNode" id="100663764" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNodeCollection" n="parentTnNodes">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="node">
			</param>
		</method>
		<method n="G1gT;AddStatementNodes" id="100663765" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNode" n="parentTn">
			</param>
			<param t="G1gT;System.Collections.Generic.IList" n="nodes">
			</param>
			<param t="X" n="title">
			</param>
			<gc type-is="0">
				<rule n="TGreenZoneParser.Parsers.Cs.StatementNode"/>
			</gc>
		</method>
		<method n="TAddParseInfos" id="100663766" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNode" n="parentTn">
			</param>
			<param t="G1TGreenZoneParser.Reflect.ParseInfo;System.Collections.Generic.IList" n="nodes">
			</param>
			<param t="X" n="title">
			</param>
		</method>
		<method n="G1gT;AddReflNodes" id="100663767" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNode" n="parentTn">
			</param>
			<param t="G1gT;System.Collections.Generic.IList" n="nodes">
			</param>
			<param t="X" n="title">
			</param>
			<gc type-is="0">
				<rule n="TGreenZoneParser.Reflect.ReflBaseNode"/>
			</gc>
		</method>
		<method n="TSetupGuiNode" id="100663768" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNode" n="treeNode">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="node">
			</param>
		</method>
		<method n="TSetupGuiNode" id="100663769" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNode" n="treeNode">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="node">
			</param>
		</method>
		<method n="TSetupGuiNode" id="100663770" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNode" n="treeNode">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ControlNode" n="node">
			</param>
		</method>
		<method n="TSetupGuiNode" id="100663771" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNode" n="treeNode">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="node">
			</param>
		</method>
		<method n="TSetupGuiNode" id="100663772" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNode" n="treeNode">
			</param>
			<param t="TGreenZoneParser.Xml.XmlTag" n="node">
			</param>
		</method>
		<method n="TSetupGuiNode" id="100663773" rt="v" mod="0">
			<param t="TSystem.Windows.Forms.TreeNode" n="treeNode">
			</param>
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="node">
			</param>
		</method>
		<method n="TSetupAfterSelect" id="100663774" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNode" n="treeNode">
			</param>
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="node">
			</param>
		</method>
		<method n="TSetupGuiNode" id="100663775" rt="v" mod="0">
			<param t="TSystem.Windows.Forms.TreeNode" n="treeNode">
			</param>
			<param t="TGreenZoneParser.Reflect.AttributeConstrArg" n="node">
			</param>
		</method>
		<method n="TSetupGuiNode" id="100663776" rt="v" mod="0">
			<param t="TSystem.Windows.Forms.TreeNode" n="treeNode">
			</param>
			<param t="TGreenZoneParser.Reflect.GenericConstraint" n="node">
			</param>
		</method>
		<method n="TSetupGuiNode" id="100663777" rt="v" mod="0">
			<param t="TSystem.Windows.Forms.TreeNode" n="treeNode">
			</param>
			<param t="TGreenZoneParser.Reflect.ParserBuf" n="node">
			</param>
		</method>
		<method n="TSetupGuiNode" id="100663778" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNode" n="treeNode">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflBaseNode" n="node">
			</param>
		</method>
		<method n="TSetupAfterSelect" id="100663779" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNode" n="treeNode">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflBaseNode" n="node">
			</param>
		</method>
		<method n="TSetupGuiNode" id="100663780" rt="v" mod="i">
			<param t="TSystem.Windows.Forms.TreeNode" n="treeNode">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="node">
			</param>
		</method>
		<method n="TGoTo" id="100663781" rt="v" mod="i">
			<param t="TGreenZoneParser.Parser+TPos" n="pos">
			</param>
			<param t="n" n="length">
			</param>
		</method>
		<method n="TGoTo" id="100663782" rt="v" mod="i">
			<param t="TGreenZoneParser.CompilationErrorEnty" n="err">
			</param>
		</method>
		<method n="TtreeView1_AfterSelect" id="100663783" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.Windows.Forms.TreeViewEventArgs" n="e">
			</param>
		</method>
		<method n="TtreeView1_BeforeExpand" id="100663784" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.Windows.Forms.TreeViewCancelEventArgs" n="e">
			</param>
		</method>
		<method n="TtreeView1_Click" id="100663785" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TerrorsTable_SelectionChanged" id="100663786" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TtokensTable_SelectionChanged" id="100663787" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TerrorsTable_CellClick" id="100663788" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.Windows.Forms.DataGridViewCellEventArgs" n="e">
			</param>
		</method>
		<method n="TtokensTable_CellClick" id="100663789" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.Windows.Forms.DataGridViewCellEventArgs" n="e">
			</param>
		</method>
		<method n="TsourceTextBox_SelectionChanged" id="100663790" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TcheckSource" id="100663791" rt="v" mod="0">
		</method>
		<prop n="ChangingTbls" id="385876123" t="b" r="True" w="True" mod="i">
		</prop>
	</type>
	<type n="TReflArrayType" ns="GreenZoneParser.Reflect" id="33554514" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflType" id="33554468"/>
		<field n="dims" id="67109159" t="n" mod="r0">
		</field>
		<field n="elementType" id="67109160" t="TGreenZoneParser.Reflect.ReflType" mod="r0">
		</field>
		<constr id="100663796" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="n" n="dims">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflType" n="elementType">
			</param>
		</constr>
		<prop n="TypeId" id="385876124" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="Dims" id="385876125" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="ElementType" id="385876126" t="TGreenZoneParser.Reflect.ReflType" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflGenericTypeArg" ns="GreenZoneParser.Reflect" id="33554515" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflType" id="33554468"/>
		<constr id="100663800" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="name">
			</param>
		</constr>
		<prop n="TypeId" id="385876127" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="FullName" id="385876128" t="X" r="True" w="False" mod="oP">
		</prop>
	</type>
	<type n="TNumberLiteralTokenRule" ns="GreenZoneParser.Lexer" id="33554516" mod="" t="cl">
		<base-t n="TGreenZoneParser.Lexer.TokenRule" id="33554436"/>
		<type n="TGreenZoneParser.Lexer.NumberLiteralTokenRule+TNumberLiteralMatchState" ns="GreenZoneParser.Lexer" id="33554517" mod="e0" t="en">
			<base n="n" id="33554686"/>
			<item n="BEGINNING" v="0"/>
			<item n="AFTER_POINT" v="1"/>
			<item n="AFTER_POINT_OK" v="2"/>
			<item n="AFTER_FLP_E" v="3"/>
			<item n="AFTER_FLP_E_PM" v="4"/>
			<item n="AFTER_FLP_E_OK" v="5"/>
			<item n="AFTER_END_1" v="6"/>
			<item n="AFTER_END_2" v="7"/>
			<item n="AFTER_END_1_2" v="8"/>
		</type>
		<field n="state" id="67109161" t="TGreenZoneParser.Lexer.NumberLiteralTokenRule+TNumberLiteralMatchState" mod="0">
		</field>
		<field n="fpeChars" id="67109162" t="X" mod="0">
		</field>
		<field n="endingByte" id="67109163" t="X" mod="0">
		</field>
		<field n="endingShort" id="67109164" t="X" mod="0">
		</field>
		<field n="endingInt" id="67109165" t="X" mod="0">
		</field>
		<field n="endingLong" id="67109166" t="X" mod="0">
		</field>
		<field n="endingFloat" id="67109167" t="X" mod="0">
		</field>
		<field n="endingDouble" id="67109168" t="X" mod="0">
		</field>
		<field n="endingUnsigned" id="67109169" t="X" mod="0">
		</field>
		<field n="plusMinusChars" id="67109170" t="X" mod="0">
		</field>
		<field n="value" id="67109171" t="d" mod="0">
		</field>
		<constr id="100663803" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
		</constr>
		<method n="TReset" id="100663804" rt="v" mod="oi">
		</method>
		<method n="TApply" id="100663807" rt="v" mod="oi">
			<param t="c" n="ch">
			</param>
			<param t="c" n="next_ch">
			</param>
		</method>
		<method n="TdefaultParse" id="100663808" rt="b" mod="0">
			<param t="c" n="ch">
			</param>
		</method>
		<method n="TappendNum" id="100663809" rt="b" mod="0">
			<param t="c" n="ch">
			</param>
		</method>
		<method n="TparseTypeEnding" id="100663810" rt="b" mod="0">
			<param t="X" n="typeEnding">
			</param>
			<param t="c" n="ch">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenId" n="preferredToken">
			</param>
			<param t="b" n="isFp">
			</param>
		</method>
		<prop n="NumberContent" id="385876129" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="Value" id="385876130" t="O" r="True" w="False" mod="oP">
		</prop>
	</type>
	<type n="TResolver" ns="GreenZoneParser.Reflect" id="33554518" mod="P" t="cl">
		<field n="types" id="67109182" t="G2XTGreenZoneParser.Reflect.ReflType;System.Collections.Generic.Dictionary" mod="r0">
		</field>
		<field n="Types" id="67109183" t="G2XTGreenZoneParser.Reflect.ReflType;GreenZoneUtil.Util.ReadOnlyDictionary" mod="rP">
		</field>
		<field n="rootParseInfo" id="67109184" t="TGreenZoneParser.Reflect.ParseInfo" mod="ri">
		</field>
		<field n="defParseInfos" id="67109185" t="G2XTGreenZoneParser.Reflect.ParseInfo;System.Collections.Generic.Dictionary" mod="r0">
		</field>
		<field n="pureReflResolver" id="67109186" t="TGreenZoneParser.Reflect.PureReflResolver" mod="r0">
		</field>
		<constr id="100663811" mod="P">
			<param t="G1XSystem.Collections.Generic.IEnumerable" n="xmlFiles">
			</param>
		</constr>
		<constr id="100663812" mod="P">
			<param t="G1TGreenZoneParser.Xml.XmlParser;System.Collections.Generic.IEnumerable" n="parsedXmlFiles">
			</param>
		</constr>
		<method n="TResolveAll" id="100663813" rt="v" mod="P">
		</method>
		<method n="TpreLoadXml" id="100663814" rt="v" mod="0">
			<param t="X" n="xmlFile">
			</param>
		</method>
		<method n="TpreLoadXml" id="100663815" rt="v" mod="0">
			<param t="TGreenZoneParser.Xml.XmlParser" n="parser">
			</param>
		</method>
		<method n="TpreLoadParseNode" id="100663816" rt="v" mod="0">
			<param t="TGreenZoneParser.Xml.XmlNode" n="parentNode">
			</param>
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="parentParseInfo">
			</param>
		</method>
		<method n="TparseGenericConstraints" id="100663817" rt="v" mod="0">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="tpParseInfo">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="typeNode">
			</param>
			<param t="n" n="ni0">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="node0">
			</param>
			<param t="TGreenZoneParser.Xml.XmlTag" n="t0">
			</param>
		</method>
		<method n="TparseAttributes" id="100663818" rt="v" mod="0">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="tpParseInfo">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="typeNode">
			</param>
			<param t="n" n="ni0">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="node0">
			</param>
			<param t="TGreenZoneParser.Xml.XmlTag" n="t0">
			</param>
		</method>
		<method n="TResolve" id="100663819" rt="TGreenZoneParser.Reflect.ReflType" mod="i">
			<param t="X" n="typeCode">
			</param>
			<param t="b" n="genericOnly">
			</param>
		</method>
		<method n="TResolve" id="100663820" rt="TGreenZoneParser.Reflect.ReflType" mod="0">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="typeInfo">
			</param>
			<param t="b" n="genericOnly">
			</param>
		</method>
		<method n="TResolve" id="100663821" rt="TGreenZoneParser.Reflect.ReflType" mod="0">
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="defTypeInfo">
			</param>
		</method>
		<method n="TFinishResolve" id="100663822" rt="v" mod="0">
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="defTypeInfo">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflType" n="type">
			</param>
		</method>
		<method n="TparseReflMember" id="100663823" rt="TGreenZoneParser.Reflect.ReflMember" mod="0">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="typeDeclParseInfo">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="memberNode">
			</param>
		</method>
		<method n="TparseReflMethod" id="100663824" rt="TGreenZoneParser.Reflect.ReflMethod" mod="0">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="typeDeclParseInfo">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="memberNode">
			</param>
		</method>
		<method n="TparseReflConstr" id="100663825" rt="TGreenZoneParser.Reflect.ReflConstructor" mod="0">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="typeDeclParseInfo">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="memberNode">
			</param>
		</method>
		<method n="TparseReflProp" id="100663826" rt="TGreenZoneParser.Reflect.ReflMember" mod="0">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="typeDeclParseInfo">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="memberNode">
			</param>
		</method>
		<method n="TparseReflField" id="100663827" rt="TGreenZoneParser.Reflect.ReflField" mod="0">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="typeDeclParseInfo">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="memberNode">
			</param>
		</method>
		<method n="TparseReflEvent" id="100663828" rt="TGreenZoneParser.Reflect.ReflEvent" mod="0">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="typeDeclParseInfo">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="memberNode">
			</param>
		</method>
		<method n="TparseReflGenericArgDefs" id="100663829" rt="A1TGreenZoneParser.Reflect.ReflTypeArgDefinition;" mod="0">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="parseInfo">
			</param>
		</method>
		<method n="TparseReflGenericArgs" id="100663830" rt="A1TGreenZoneParser.Reflect.ReflTypeArg;" mod="0">
			<param t="TGreenZoneParser.Reflect.ReflCallableType" n="type">
			</param>
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="parseInfo">
			</param>
		</method>
		<method n="TparseReflAttributes" id="100663831" rt="A1TGreenZoneParser.Reflect.ReflAttribute;" mod="0">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="parseInfo">
			</param>
		</method>
		<method n="TparseReflMethodParameters" id="100663832" rt="A1TGreenZoneParser.Reflect.ReflMethodArgDefinition;" mod="0">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="parentDef">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="methodNode">
			</param>
			<param t="n" n="ni0">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="node0">
			</param>
			<param t="TGreenZoneParser.Xml.XmlTag" n="t0">
			</param>
		</method>
		<method n="Tok_child" id="100663833" rt="b" mod="0">
			<param t="TGreenZoneParser.Xml.XmlNode" n="parentNode">
			</param>
			<param t="n" n="ni">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="node">
			</param>
			<param t="TGreenZoneParser.Xml.XmlTag" n="tag">
			</param>
			<param t="A1X" n="supportedTagNames" p="Params">
				<attrs>
					<attr t="aSystem.ParamArrayAttribute" constr="100667008">
					</attr>
				</attrs>
			</param>
		</method>
		<method n="Tok_child" id="100663834" rt="b" mod="0">
			<param t="TGreenZoneParser.Xml.XmlNode" n="parentNode">
			</param>
			<param t="n" n="ni">
			</param>
			<param t="TGreenZoneParser.Xml.XmlNode" n="node">
			</param>
			<param t="TGreenZoneParser.Xml.XmlTag" n="tag">
			</param>
			<param t="G1XSystem.Collections.Generic.ISet" n="supportedTagNames">
			</param>
		</method>
		<method n="TdecodeTypeCode" id="100663835" rt="TGreenZoneParser.Reflect.ParseInfo" mod="0">
			<param t="TGreenZoneParser.Reflect.ParserBuf" n="parentParseInfo">
			</param>
			<param t="X" n="typeCode">
			</param>
			<param t="n" n="pos">
			</param>
			<param t="b" n="isClassDefinition">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
			<param t="b" n="isRoot">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
		</method>
		<method n="TsplitNamespace" id="100663836" rt="v" mod="0">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="result">
			</param>
		</method>
		<method n="TParseModifiers" id="100663837" rt="TGreenZoneParser.Reflect.ReflModifier" mod="i">
			<param t="X" n="modCode">
			</param>
		</method>
		<method n="TdecodeModifiers" id="100663838" rt="v" mod="0">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="parseInfo">
			</param>
			<param t="X" n="modCode">
			</param>
			<param t="n" n="pos">
			</param>
		</method>
	</type>
	<type n="TReflStructType" ns="GreenZoneParser.Reflect" id="33554519" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflDefType" id="33554496"/>
		<field n="baseType" id="67109187" t="TGreenZoneParser.Reflect.ReflType" mod="r0">
		</field>
		<constr id="100663839" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="X" n="namespaceId">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflType" n="baseType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<constr id="100663840" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflType" n="baseType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<method n="TApplyGenericArgs" id="100663843" rt="TGreenZoneParser.Reflect.ReflCallableType" mod="oi">
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflTypeArg;" n="genericTypeArgs">
			</param>
		</method>
		<prop n="TypeId" id="385876131" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="BaseType" id="385876132" t="TGreenZoneParser.Reflect.ReflType" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TDelegateDefStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554520" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.TypeDefStatementNode" id="33554450"/>
		<field n="signature" id="67109188" t="TGreenZoneParser.Parsers.Cs.MethodDefStatementNode" mod="r0">
		</field>
		<constr id="100663844" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.MethodDefStatementNode" n="signature">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="Signature" id="385876133" t="TGreenZoneParser.Parsers.Cs.MethodDefStatementNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TEmptyStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554521" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100663846" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TMethodExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554522" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="pointToken" id="67109189" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="left" id="67109190" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<field n="methodIdentifier" id="67109191" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="typeParameters" id="67109192" t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="typeParametersUm" id="67109193" t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="parens" id="67109194" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="r0">
		</field>
		<field n="argumentList" id="67109195" t="G1TGreenZoneParser.Parsers.Cs.ArgumentNode;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="argumentListUm" id="67109196" t="G1TGreenZoneParser.Parsers.Cs.ArgumentNode;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100663847" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="pointToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="left">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.List" n="typeParameters">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="parens">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="methodIdentifier">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ArgumentNode;System.Collections.Generic.List" n="argumentList">
			</param>
		</constr>
		<prop n="PointToken" id="385876134" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="Left" id="385876135" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="MethodIdentifier" id="385876136" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="TypeParameters" id="385876137" t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Parens" id="385876138" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="ArgumentList" id="385876139" t="G1TGreenZoneParser.Parsers.Cs.ArgumentNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="ValidStatement" id="385876140" t="b" r="True" w="False" mod="oP">
		</prop>
	</type>
	<type n="TIdentifierNode" ns="GreenZoneParser.Parsers.Cs" id="33554523" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<constr id="100663855" mod="P">
			<param t="TGreenZoneParser.Parsers.StatementId" n="expressionId">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
		</constr>
	</type>
	<type n="TFieldAccessOrIdNode" ns="GreenZoneParser.Parsers.Cs" id="33554524" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.IdentifierNode" id="33554523"/>
		<field n="pointToken" id="67109197" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="left" id="67109198" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<field n="fieldIdentifier" id="67109199" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<constr id="100663856" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="pointToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="left">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="fieldIdentifier">
			</param>
		</constr>
		<prop n="PointToken" id="385876141" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="Left" id="385876142" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="FieldIdentifier" id="385876143" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TUncheckedStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554525" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100663860" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TReflTypeArgDefinition" ns="GreenZoneParser.Reflect" id="33554526" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflBaseNode" id="33554463"/>
		<field n="typeParameterName" id="67109200" t="X" mod="r0">
		</field>
		<field n="genericTypeArgRules" id="67109201" t="A1TGreenZoneParser.Reflect.ReflTypeArgRule;" mod="r0">
		</field>
		<constr id="100663861" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="typeParameterName">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflTypeArgRule;" n="genericTypeArgRules" p="Params">
				<attrs>
					<attr t="aSystem.ParamArrayAttribute" constr="100667008">
					</attr>
				</attrs>
			</param>
		</constr>
		<prop n="TypeId" id="385876144" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="TypeParameterName" id="385876145" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="GenericTypeArgRules" id="385876146" t="A1TGreenZoneParser.Reflect.ReflTypeArgRule;" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflAttributeArg" ns="GreenZoneParser.Reflect" id="33554527" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflBaseNode" id="33554463"/>
		<field n="parent" id="67109202" t="TGreenZoneParser.Reflect.ReflAttribute" mod="r0">
		</field>
		<field n="argIndex" id="67109203" t="n" mod="r0">
		</field>
		<field n="argProperty" id="67109204" t="X" mod="r0">
		</field>
		<field n="methodArg" id="67109205" t="TGreenZoneParser.Reflect.ReflMethodArgDefinition" mod="0">
		</field>
		<field n="value" id="67109206" t="X" mod="r0">
		</field>
		<constr id="100663865" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflAttribute" n="parent">
			</param>
			<param t="n" n="argIndex">
			</param>
			<param t="X" n="value">
			</param>
		</constr>
		<constr id="100663866" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflAttribute" n="parent">
			</param>
			<param t="X" n="argProperty">
			</param>
			<param t="X" n="value">
			</param>
		</constr>
		<prop n="TypeId" id="385876147" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="Parent" id="385876148" t="TGreenZoneParser.Reflect.ReflAttribute" r="True" w="False" mod="P">
		</prop>
		<prop n="ArgIndex" id="385876149" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="ArgProperty" id="385876150" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="MethodArg" id="385876151" t="TGreenZoneParser.Reflect.ReflMethodArgDefinition" r="True" w="False" mod="P">
		</prop>
		<prop n="Value" id="385876152" t="X" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TElseStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554528" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100663873" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TCatchStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554529" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100663874" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TTypeSpecifierNode" ns="GreenZoneParser.Parsers.Cs" id="33554530" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.IdentifierNode" id="33554523"/>
		<field n="firstBracketExpressions" id="67109207" t="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.List" mod="ri">
		</field>
		<field n="firstBracketExpressionsUm" id="67109208" t="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="initializerRanks" id="67109209" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="ri">
		</field>
		<field n="commaSeparatedRanks" id="67109210" t="n" mod="r0">
		</field>
		<field n="emptyRanks" id="67109211" t="n" mod="r0">
		</field>
		<field n="emptyRanksFirst" id="67109212" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="r0">
		</field>
		<field n="emptyRanksLast" id="67109213" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="r0">
		</field>
		<field n="pointerStar" id="67109214" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<constr id="100663875" mod="P">
			<param t="TGreenZoneParser.Parsers.StatementId" n="id">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.List" n="firstBracketExpressions">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="initializerRanks">
			</param>
			<param t="n" n="commaSeparatedRanks">
			</param>
			<param t="n" n="emptyRanks">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="emptyRanksFirst">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="emptyRanksLast">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="pointerStar">
			</param>
		</constr>
		<prop n="Name" id="385876153" t="X" r="True" w="False" mod="aP">
		</prop>
		<prop n="IsArray" id="385876154" t="b" r="True" w="False" mod="P">
		</prop>
		<prop n="IsPointer" id="385876155" t="b" r="True" w="False" mod="P">
		</prop>
		<prop n="IsGeneric" id="385876156" t="b" r="True" w="False" mod="vP">
		</prop>
		<prop n="FirstBracketExpressions" id="385876157" t="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="InitializerRanks" id="385876158" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="CommaSeparatedRanks" id="385876159" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="EmptyRanks" id="385876160" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="EmptyRanksFirst" id="385876161" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="EmptyRanksLast" id="385876162" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="PointerStar" id="385876163" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TLinqOrderByExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554531" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="orderings" id="67109215" t="G1TGreenZoneParser.Parsers.Cs.LinqOrderingExpressionNode;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="orderingsUm" id="67109216" t="G1TGreenZoneParser.Parsers.Cs.LinqOrderingExpressionNode;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100663887" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.LinqOrderingExpressionNode;System.Collections.Generic.List" n="orderings">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="Orderings" id="385876164" t="G1TGreenZoneParser.Parsers.Cs.LinqOrderingExpressionNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflPropertySet" ns="GreenZoneParser.Reflect" id="33554532" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflMethodBase" id="33554466"/>
		<field n="parent" id="67109217" t="TGreenZoneParser.Reflect.ReflProperty" mod="r0">
		</field>
		<constr id="100663889" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflProperty" n="parent">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
		</constr>
		<prop n="TypeId" id="385876165" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="Parent" id="385876166" t="TGreenZoneParser.Reflect.ReflProperty" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflTypeArg" ns="GreenZoneParser.Reflect" id="33554533" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflBaseNode" id="33554463"/>
		<field n="definition" id="67109218" t="TGreenZoneParser.Reflect.ReflTypeArgDefinition" mod="r0">
		</field>
		<field n="actualType" id="67109219" t="TGreenZoneParser.Reflect.ReflType" mod="r0">
		</field>
		<constr id="100663892" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflTypeArgDefinition" n="definition">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflType" n="actualType">
			</param>
		</constr>
		<prop n="TypeId" id="385876167" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="Definition" id="385876168" t="TGreenZoneParser.Reflect.ReflTypeArgDefinition" r="True" w="False" mod="P">
		</prop>
		<prop n="ActualType" id="385876169" t="TGreenZoneParser.Reflect.ReflType" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflEvent" ns="GreenZoneParser.Reflect" id="33554534" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflField" id="33554465"/>
		<constr id="100663896" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflDelegateType" n="eventType">
			</param>
			<param t="X" n="eventName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
		</constr>
		<prop n="TypeId" id="385876170" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="EventType" id="385876171" t="TGreenZoneParser.Reflect.ReflDelegateType" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflEnumConstant" ns="GreenZoneParser.Reflect" id="33554535" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflBaseNode" id="33554463"/>
		<field n="declaringType" id="67109220" t="TGreenZoneParser.Reflect.ReflEnumType" mod="r0">
		</field>
		<field n="name" id="67109221" t="X" mod="r0">
		</field>
		<field n="value" id="67109222" t="e" mod="r0">
		</field>
		<constr id="100663899" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflEnumType" n="declaringType">
			</param>
			<param t="X" n="name">
			</param>
			<param t="e" n="value">
			</param>
		</constr>
		<prop n="TypeId" id="385876172" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="DeclaringType" id="385876173" t="TGreenZoneParser.Reflect.ReflEnumType" r="True" w="False" mod="P">
		</prop>
		<prop n="Name" id="385876174" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="Value" id="385876175" t="e" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TForStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554536" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100663904" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TIfStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554537" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100663905" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TFixedStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554538" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100663906" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TFor1or3SubStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554539" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100663907" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TCheckedNode" ns="GreenZoneParser.Parsers.Cs" id="33554540" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="keywordToken" id="67109223" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="parens" id="67109224" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="r0">
		</field>
		<field n="innerExpression" id="67109225" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100663908" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="parens">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="keywordToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="innerExpression">
			</param>
		</constr>
		<prop n="KeywordToken" id="385876176" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="Parens" id="385876177" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="InnerExpression" id="385876178" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TIndexerDefStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554541" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.BaseMethodStatementNode" id="33554490"/>
		<constr id="100663912" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" n="typeExpression">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="identifierToken">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="brackets">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.VarDeclArgumentNode;System.Collections.Generic.List" n="argumentList">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="Brackets" id="385876179" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TLinqJoinExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554542" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="typeSpecifier" id="67109226" t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" mod="r0">
		</field>
		<field n="identifier" id="67109227" t="TGreenZoneParser.Parsers.Cs.AtomicExpressionNode" mod="r0">
		</field>
		<field n="inExpression" id="67109228" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<field n="onExpression" id="67109229" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<field n="onEqualsExpression" id="67109230" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<field n="intoIdentifier" id="67109231" t="TGreenZoneParser.Parsers.Cs.AtomicExpressionNode" mod="r0">
		</field>
		<constr id="100663914" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" n="typeSpecifier">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.AtomicExpressionNode" n="identifier">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="inExpression">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="onExpression">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="onEqualsExpression">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.AtomicExpressionNode" n="intoIdentifier">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="TypeSpecifier" id="385876180" t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" r="True" w="False" mod="P">
		</prop>
		<prop n="Identifier" id="385876181" t="TGreenZoneParser.Parsers.Cs.AtomicExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="InExpression" id="385876182" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="OnExpression" id="385876183" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="OnEqualsExpression" id="385876184" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="IntoIdentifier" id="385876185" t="TGreenZoneParser.Parsers.Cs.AtomicExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TTokenId" ns="GreenZoneParser.Lexer" id="33554543" mod="eP" t="en">
		<base n="n" id="33554686"/>
		<item n="StringLiteral" v="0"/>
		<item n="CharLiteral" v="1"/>
		<item n="ByteLiteral" v="2"/>
		<item n="ShortLiteral" v="3"/>
		<item n="IntLiteral" v="4"/>
		<item n="LongLiteral" v="5"/>
		<item n="FloatLiteral" v="6"/>
		<item n="DoubleLiteral" v="7"/>
		<item n="UShortLiteral" v="8"/>
		<item n="UIntLiteral" v="9"/>
		<item n="ULongLiteral" v="10"/>
		<item n="Identifier" v="11"/>
		<item n="WhiteSpace" v="12"/>
		<item n="Comment" v="13"/>
		<item n="Var" v="14"/>
		<item n="String" v="15"/>
		<item n="Char" v="16"/>
		<item n="Byte" v="17"/>
		<item n="Short" v="18"/>
		<item n="Int" v="19"/>
		<item n="Long" v="20"/>
		<item n="Float" v="21"/>
		<item n="Double" v="22"/>
		<item n="UShort" v="23"/>
		<item n="UInt" v="24"/>
		<item n="ULong" v="25"/>
		<item n="This" v="26"/>
		<item n="Base" v="27"/>
		<item n="True" v="28"/>
		<item n="False" v="29"/>
		<item n="Null" v="30"/>
		<item n="Decimal" v="31"/>
		<item n="Bool" v="32"/>
		<item n="Void" v="33"/>
		<item n="Object" v="34"/>
		<item n="Sbyte" v="35"/>
		<item n="From" v="36"/>
		<item n="Where" v="37"/>
		<item n="Let" v="38"/>
		<item n="Select" v="39"/>
		<item n="Join" v="40"/>
		<item n="Group" v="41"/>
		<item n="By" v="42"/>
		<item n="Order" v="43"/>
		<item n="Ascending" v="44"/>
		<item n="Descending" v="45"/>
		<item n="Into" v="46"/>
		<item n="Distinct" v="47"/>
		<item n="On" v="48"/>
		<item n="EqualsLinq" v="49"/>
		<item n="Is" v="50"/>
		<item n="As" v="51"/>
		<item n="New" v="52"/>
		<item n="Typeof" v="53"/>
		<item n="Checked" v="54"/>
		<item n="Unchecked" v="55"/>
		<item n="Unsafe" v="56"/>
		<item n="Lock" v="57"/>
		<item n="In" v="58"/>
		<item n="Fixed" v="59"/>
		<item n="Namespace" v="60"/>
		<item n="Class" v="61"/>
		<item n="Interface" v="62"/>
		<item n="Struct" v="63"/>
		<item n="Enum" v="64"/>
		<item n="Delegate" v="65"/>
		<item n="Event" v="66"/>
		<item n="Using" v="67"/>
		<item n="Extern" v="68"/>
		<item n="Alias" v="69"/>
		<item n="Ref" v="70"/>
		<item n="Out" v="71"/>
		<item n="Params" v="72"/>
		<item n="Default" v="73"/>
		<item n="If" v="74"/>
		<item n="Else" v="75"/>
		<item n="Switch" v="76"/>
		<item n="For" v="77"/>
		<item n="Foreach" v="78"/>
		<item n="While" v="79"/>
		<item n="Do" v="80"/>
		<item n="Try" v="81"/>
		<item n="Catch" v="82"/>
		<item n="Finally" v="83"/>
		<item n="Throw" v="84"/>
		<item n="Break" v="85"/>
		<item n="Continue" v="86"/>
		<item n="Goto" v="87"/>
		<item n="Case" v="88"/>
		<item n="Return" v="89"/>
		<item n="Get" v="90"/>
		<item n="Set" v="91"/>
		<item n="Value" v="92"/>
		<item n="Private" v="93"/>
		<item n="Protected" v="94"/>
		<item n="Public" v="95"/>
		<item n="Internal" v="96"/>
		<item n="Abstract" v="97"/>
		<item n="Override" v="98"/>
		<item n="Partial" v="99"/>
		<item n="Readonly" v="100"/>
		<item n="Sealed" v="101"/>
		<item n="Static" v="102"/>
		<item n="Virtual" v="103"/>
		<item n="Volatile" v="104"/>
		<item n="Const" v="105"/>
		<item n="Assembly" v="106"/>
		<item n="Field" v="107"/>
		<item n="Method" v="108"/>
		<item n="Module" v="109"/>
		<item n="Param" v="110"/>
		<item n="Property" v="111"/>
		<item n="Type" v="112"/>
		<item n="BlockOpen" v="113"/>
		<item n="BlockClose" v="114"/>
		<item n="ArrayOrAttributeOpen" v="115"/>
		<item n="ArrayOrAttributeClose" v="116"/>
		<item n="ParenOpen" v="117"/>
		<item n="ParenClose" v="118"/>
		<item n="StatementSepScolon" v="119"/>
		<item n="Plus" v="120"/>
		<item n="PlusPlus" v="121"/>
		<item n="Minus" v="122"/>
		<item n="MinusMinus" v="123"/>
		<item n="Star" v="124"/>
		<item n="Slash" v="125"/>
		<item n="Modulo" v="126"/>
		<item n="And" v="127"/>
		<item n="Or" v="128"/>
		<item n="Xor" v="129"/>
		<item n="AndAnd" v="130"/>
		<item n="OrOr" v="131"/>
		<item n="Not" v="132"/>
		<item n="NotBitws" v="133"/>
		<item n="Assign" v="134"/>
		<item n="PlusAssign" v="135"/>
		<item n="MinusAssign" v="136"/>
		<item n="MulAssign" v="137"/>
		<item n="PerAssign" v="138"/>
		<item n="XorAssign" v="139"/>
		<item n="AndAssign" v="140"/>
		<item n="OrAssign" v="141"/>
		<item n="ModAssign" v="142"/>
		<item n="LsAssign" v="143"/>
		<item n="RsAssign" v="144"/>
		<item n="Equal" v="145"/>
		<item n="NonEqual" v="146"/>
		<item n="Gt" v="147"/>
		<item n="Lt" v="148"/>
		<item n="Ge" v="149"/>
		<item n="Le" v="150"/>
		<item n="Point" v="151"/>
		<item n="Comma" v="152"/>
		<item n="Colon" v="153"/>
		<item n="Qmark" v="154"/>
	</type>
	<type n="TTokenIdEx" ns="GreenZoneParser.Lexer" id="33554544" mod="sP" t="cl">
		<attrs>
			<attr t="aSystem.Runtime.CompilerServices.ExtensionAttribute" constr="100667849">
			</attr>
		</attrs>
		<method n="TUnsignedPair" id="100663921" rt="TGreenZoneParser.Lexer.TokenId" mod="sP">
			<attrs>
				<attr t="aSystem.Runtime.CompilerServices.ExtensionAttribute" constr="100667849">
				</attr>
			</attrs>
			<param t="TGreenZoneParser.Lexer.TokenId" n="tokenId" p="This">
			</param>
		</method>
		<method n="TClosingPair" id="100663922" rt="TGreenZoneParser.Lexer.TokenId" mod="sP">
			<attrs>
				<attr t="aSystem.Runtime.CompilerServices.ExtensionAttribute" constr="100667849">
				</attr>
			</attrs>
			<param t="TGreenZoneParser.Lexer.TokenId" n="tokenId" p="This">
			</param>
		</method>
		<method n="TIsModifier" id="100663923" rt="b" mod="sP">
			<attrs>
				<attr t="aSystem.Runtime.CompilerServices.ExtensionAttribute" constr="100667849">
				</attr>
			</attrs>
			<param t="TGreenZoneParser.Lexer.TokenId" n="tokenId" p="This">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockParseMode" n="blockParseMode">
			</param>
		</method>
		<method n="TIsIdentifier" id="100663924" rt="b" mod="sP">
			<attrs>
				<attr t="aSystem.Runtime.CompilerServices.ExtensionAttribute" constr="100667849">
				</attr>
			</attrs>
			<param t="TGreenZoneParser.Lexer.TokenId" n="tokenId" p="This">
			</param>
		</method>
	</type>
	<type n="TToken" ns="GreenZoneParser.Lexer" id="33554545" mod="P" t="cl">
		<base-i n="TSystem.IComparable" id="33554442"/>
		<base-i n="G1TGreenZoneParser.Lexer.Token;System.IComparable" id="33554494"/>
		<field n="id" id="67109388" t="TGreenZoneParser.Lexer.TokenId" mod="r0">
		</field>
		<field n="contentString" id="67109389" t="X" mod="r0">
		</field>
		<field n="tokenStartPos" id="67109390" t="n" mod="r0">
		</field>
		<field n="tokenEndPos" id="67109391" t="n" mod="r0">
		</field>
		<field n="totalIndex" id="67109392" t="n" mod="r0">
		</field>
		<field n="index" id="67109393" t="n" mod="r0">
		</field>
		<field n="blockIndex" id="67109394" t="n" mod="r0">
		</field>
		<field n="arrayIndex" id="67109395" t="n" mod="r0">
		</field>
		<field n="parenIndex" id="67109396" t="n" mod="r0">
		</field>
		<field n="genericIndex" id="67109397" t="n" mod="r0">
		</field>
		<field n="block" id="67109398" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="r0">
		</field>
		<field n="genericBlock" id="67109399" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="r0">
		</field>
		<field n="statementIndex" id="67109400" t="n" mod="r0">
		</field>
		<field n="commaIndex" id="67109401" t="n" mod="r0">
		</field>
		<field n="colonIndex" id="67109402" t="n" mod="r0">
		</field>
		<field n="value" id="67109403" t="O" mod="r0">
		</field>
		<field n="assignIndex" id="67109404" t="n" mod="r0">
		</field>
		<field n="plusAssignIndex" id="67109405" t="n" mod="r0">
		</field>
		<field n="minusAssignIndex" id="67109406" t="n" mod="r0">
		</field>
		<field n="mulAssignIndex" id="67109407" t="n" mod="r0">
		</field>
		<field n="perAssignIndex" id="67109408" t="n" mod="r0">
		</field>
		<field n="xorAssignIndex" id="67109409" t="n" mod="r0">
		</field>
		<field n="andAssignIndex" id="67109410" t="n" mod="r0">
		</field>
		<field n="orAssignIndex" id="67109411" t="n" mod="r0">
		</field>
		<field n="modAssignIndex" id="67109412" t="n" mod="r0">
		</field>
		<field n="lsAssignIndex" id="67109413" t="n" mod="r0">
		</field>
		<field n="rsAssignIndex" id="67109414" t="n" mod="r0">
		</field>
		<field n="qmarkIndex" id="67109415" t="n" mod="r0">
		</field>
		<field n="orOrIndex" id="67109416" t="n" mod="r0">
		</field>
		<field n="andAndIndex" id="67109417" t="n" mod="r0">
		</field>
		<field n="orIndex" id="67109418" t="n" mod="r0">
		</field>
		<field n="xorIndex" id="67109419" t="n" mod="r0">
		</field>
		<field n="andIndex" id="67109420" t="n" mod="r0">
		</field>
		<field n="equalsIndex" id="67109421" t="n" mod="r0">
		</field>
		<field n="nonEqualsIndex" id="67109422" t="n" mod="r0">
		</field>
		<field n="ltIndex" id="67109423" t="n" mod="r0">
		</field>
		<field n="gtIndex" id="67109424" t="n" mod="r0">
		</field>
		<field n="leIndex" id="67109425" t="n" mod="r0">
		</field>
		<field n="geIndex" id="67109426" t="n" mod="r0">
		</field>
		<field n="isIndex" id="67109427" t="n" mod="r0">
		</field>
		<field n="asIndex" id="67109428" t="n" mod="r0">
		</field>
		<field n="lsIndex" id="67109429" t="n" mod="r0">
		</field>
		<field n="rsIndex" id="67109430" t="n" mod="r0">
		</field>
		<field n="plusIndex" id="67109431" t="n" mod="r0">
		</field>
		<field n="minusIndex" id="67109432" t="n" mod="r0">
		</field>
		<field n="mulIndex" id="67109433" t="n" mod="r0">
		</field>
		<field n="perIndex" id="67109434" t="n" mod="r0">
		</field>
		<field n="modIndex" id="67109435" t="n" mod="r0">
		</field>
		<field n="notIndex" id="67109436" t="n" mod="r0">
		</field>
		<field n="bwnotIndex" id="67109437" t="n" mod="r0">
		</field>
		<field n="plusPlusIndex" id="67109438" t="n" mod="r0">
		</field>
		<field n="minusMinusIndex" id="67109439" t="n" mod="r0">
		</field>
		<field n="whereIndex" id="67109440" t="n" mod="r0">
		</field>
		<field n="inIndex" id="67109441" t="n" mod="r0">
		</field>
		<field n="pointIndex" id="67109442" t="n" mod="r0">
		</field>
		<constr id="100663925" mod="i">
			<param t="TGreenZoneParser.Lexer.TokenId" n="id">
			</param>
			<param t="X" n="contentString">
			</param>
			<param t="n" n="tokenStartPos">
			</param>
			<param t="n" n="tokenEndPos">
			</param>
			<param t="n" n="totalIndex">
			</param>
			<param t="n" n="index">
			</param>
			<param t="n" n="blockIndex">
			</param>
			<param t="n" n="arrayIndex">
			</param>
			<param t="n" n="parenIndex">
			</param>
			<param t="n" n="genericIndex">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="block">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="genericBlock">
			</param>
			<param t="O" n="value">
			</param>
		</constr>
		<method n="TOperatorTokenIndex" id="100663982" rt="n" mod="P">
			<param t="TGreenZoneParser.Lexer.TokenId" n="operatorTokenId">
			</param>
		</method>
		<method n="TToString" id="100663983" rt="X" mod="oP">
		</method>
		<method n="Tmxs" id="100663984" rt="X" mod="0">
			<param t="X" n="s">
			</param>
			<param t="n" n="len">
			</param>
		</method>
		<method n="TCompareTo" id="100663985" rt="n" mod="vP">
			<param t="O" n="obj">
			</param>
		</method>
		<method n="TCompareTo" id="100663986" rt="n" mod="vP">
			<param t="TGreenZoneParser.Lexer.Token" n="other">
			</param>
		</method>
		<prop n="Id" id="385876186" t="TGreenZoneParser.Lexer.TokenId" r="True" w="False" mod="P">
		</prop>
		<prop n="ContentString" id="385876187" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="TokenStartPos" id="385876188" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="TokenEndPos" id="385876189" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="TotalIndex" id="385876190" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="Index" id="385876191" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="BlockIndex" id="385876192" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="ArrayIndex" id="385876193" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="ParenIndex" id="385876194" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="GenericIndex" id="385876195" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="Block" id="385876196" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="GenericBlock" id="385876197" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="StatementIndex" id="385876198" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="CommaIndex" id="385876199" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="ColonIndex" id="385876200" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="Value" id="385876201" t="O" r="True" w="False" mod="P">
		</prop>
		<prop n="AssignIndex" id="385876202" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="PlusAssignIndex" id="385876203" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="MinusAssignIndex" id="385876204" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="MulAssignIndex" id="385876205" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="PerAssignIndex" id="385876206" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="XorAssignIndex" id="385876207" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="AndAssignIndex" id="385876208" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="OrAssignIndex" id="385876209" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="ModAssignIndex" id="385876210" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="LsAssignIndex" id="385876211" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="RsAssignIndex" id="385876212" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="QmarkIndex" id="385876213" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="OrOrIndex" id="385876214" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="AndAndIndex" id="385876215" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="OrIndex" id="385876216" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="XorIndex" id="385876217" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="AndIndex" id="385876218" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="EqualsIndex" id="385876219" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="NonEqualsIndex" id="385876220" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="LtIndex" id="385876221" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="GtIndex" id="385876222" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="LeIndex" id="385876223" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="GeIndex" id="385876224" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="IsIndex" id="385876225" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="AsIndex" id="385876226" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="LsIndex" id="385876227" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="RsIndex" id="385876228" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="PlusIndex" id="385876229" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="MinusIndex" id="385876230" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="MulIndex" id="385876231" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="PerIndex" id="385876232" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="ModIndex" id="385876233" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="NotIndex" id="385876234" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="BwnotIndex" id="385876235" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="PlusPlusIndex" id="385876236" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="MinusMinusIndex" id="385876237" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="WhereIndex" id="385876238" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="InIndex" id="385876239" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="PointIndex" id="385876240" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="Length" id="385876241" t="n" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TTokenOpenCloseType" ns="GreenZoneParser.Lexer" id="33554546" mod="eP" t="en">
		<base n="n" id="33554686"/>
		<item n="Main" v="0"/>
		<item n="Block" v="1"/>
		<item n="Array" v="2"/>
		<item n="Paren" v="3"/>
		<item n="Generic" v="4"/>
	</type>
	<type n="TTokenOpenCloseTypeEx" ns="GreenZoneParser.Lexer" id="33554547" mod="sP" t="cl">
		<attrs>
			<attr t="aSystem.Runtime.CompilerServices.ExtensionAttribute" constr="100667849">
			</attr>
		</attrs>
		<method n="TGetTokenId" id="100663987" rt="TGreenZoneParser.Lexer.TokenId" mod="sP">
			<attrs>
				<attr t="aSystem.Runtime.CompilerServices.ExtensionAttribute" constr="100667849">
				</attr>
			</attrs>
			<param t="TGreenZoneParser.Lexer.TokenOpenCloseType" n="toc" p="This">
			</param>
		</method>
		<method n="TGetTokenInfo" id="100663988" rt="X" mod="sP">
			<attrs>
				<attr t="aSystem.Runtime.CompilerServices.ExtensionAttribute" constr="100667849">
				</attr>
			</attrs>
			<param t="TGreenZoneParser.Lexer.TokenOpenCloseType" n="toc" p="This">
			</param>
		</method>
	</type>
	<type n="TTokenOpenClose" ns="GreenZoneParser.Lexer" id="33554548" mod="P" t="cl">
		<field n="type" id="67109449" t="TGreenZoneParser.Lexer.TokenOpenCloseType" mod="r0">
		</field>
		<field n="openToken" id="67109450" t="TGreenZoneParser.Lexer.Token" mod="0">
		</field>
		<field n="closeToken" id="67109451" t="TGreenZoneParser.Lexer.Token" mod="0">
		</field>
		<field n="parent" id="67109452" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="0">
		</field>
		<field n="children" id="67109453" t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="childrenUm" id="67109454" t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="childrenBlock" id="67109455" t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="childrenBlockUm" id="67109456" t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="childrenArray" id="67109457" t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="childrenArrayUm" id="67109458" t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="childrenParen" id="67109459" t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="childrenParenUm" id="67109460" t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="childrenGeneric" id="67109461" t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="childrenGenericUm" id="67109462" t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="semicolons" id="67109463" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="semicolonsUm" id="67109464" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="commas" id="67109465" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="commasUm" id="67109466" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="assigns" id="67109467" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="assignsUm" id="67109468" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="plusAssigns" id="67109469" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="plusAssignsUm" id="67109470" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="minusAssigns" id="67109471" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="minusAssignsUm" id="67109472" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="mulAssigns" id="67109473" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="mulAssignsUm" id="67109474" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="perAssigns" id="67109475" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="perAssignsUm" id="67109476" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="xorAssigns" id="67109477" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="xorAssignsUm" id="67109478" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="andAssigns" id="67109479" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="andAssignsUm" id="67109480" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="orAssigns" id="67109481" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="orAssignsUm" id="67109482" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="modAssigns" id="67109483" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="modAssignsUm" id="67109484" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="lsAssigns" id="67109485" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="lsAssignsUm" id="67109486" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="rsAssigns" id="67109487" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="rsAssignsUm" id="67109488" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="qmarks" id="67109489" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="qmarksUm" id="67109490" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="colons" id="67109491" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="colonsUm" id="67109492" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="orOrs" id="67109493" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="orOrsUm" id="67109494" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="andAnds" id="67109495" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="andAndsUm" id="67109496" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="ors" id="67109497" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="orsUm" id="67109498" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="xors" id="67109499" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="xorsUm" id="67109500" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="ands" id="67109501" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="andsUm" id="67109502" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="equalss" id="67109503" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="equalssUm" id="67109504" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="nonEqualss" id="67109505" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="nonEqualssUm" id="67109506" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="lts" id="67109507" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="ltsUm" id="67109508" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="gts" id="67109509" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="gtsUm" id="67109510" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="les" id="67109511" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="lesUm" id="67109512" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="ges" id="67109513" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="gesUm" id="67109514" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="iss" id="67109515" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="issUm" id="67109516" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="ass" id="67109517" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="assUm" id="67109518" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="lss" id="67109519" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="lssUm" id="67109520" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="rss" id="67109521" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="rssUm" id="67109522" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="pluss" id="67109523" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="plussUm" id="67109524" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="minuss" id="67109525" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="minussUm" id="67109526" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="muls" id="67109527" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="mulsUm" id="67109528" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="pers" id="67109529" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="persUm" id="67109530" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="mods" id="67109531" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="modsUm" id="67109532" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="nots" id="67109533" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="notsUm" id="67109534" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="bwnots" id="67109535" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="bwnotsUm" id="67109536" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="plusPluss" id="67109537" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="plusPlussUm" id="67109538" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="minusMinuss" id="67109539" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="minusMinussUm" id="67109540" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="wheres" id="67109541" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="wheresUm" id="67109542" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="ins" id="67109543" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="insUm" id="67109544" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="points" id="67109545" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="pointsUm" id="67109546" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="index" id="67109547" t="n" mod="0">
		</field>
		<field n="blockIndex" id="67109548" t="n" mod="0">
		</field>
		<field n="arrayIndex" id="67109549" t="n" mod="0">
		</field>
		<field n="parenIndex" id="67109550" t="n" mod="0">
		</field>
		<field n="genericIndex" id="67109551" t="n" mod="0">
		</field>
		<constr id="100663989" mod="i">
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenCloseType" n="type">
			</param>
		</constr>
		<method n="TOperatorTokens" id="100664048" rt="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="P">
			<param t="TGreenZoneParser.Lexer.TokenId" n="operatorTokenId">
			</param>
		</method>
		<method n="TPrevious" id="100664049" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
		</method>
		<method n="TNext" id="100664050" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
		</method>
		<method n="TPreviousBlock" id="100664051" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
		</method>
		<method n="TPreviousGeneric" id="100664052" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
		</method>
		<method n="TNextBlock" id="100664053" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
		</method>
		<method n="TPreviousArray" id="100664054" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
		</method>
		<method n="TNextArray" id="100664055" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
		</method>
		<method n="TPreviousParen" id="100664056" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
		</method>
		<method n="TNextParen" id="100664057" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
		</method>
		<method n="TNextGeneric" id="100664058" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
		</method>
		<method n="TOperator" id="100664059" rt="TGreenZoneParser.Lexer.Token" mod="P">
			<param t="TGreenZoneParser.Lexer.TokenId" n="operatorTokenId">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="token">
			</param>
		</method>
		<method n="TPrevOperator" id="100664060" rt="TGreenZoneParser.Lexer.Token" mod="P">
			<param t="TGreenZoneParser.Lexer.TokenId" n="operatorTokenId">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="token">
			</param>
		</method>
		<method n="TPrevious" id="100664061" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="0">
			<param t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.List" n="children">
			</param>
			<param t="n" n="index">
			</param>
		</method>
		<method n="TNext" id="100664062" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="0">
			<param t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.List" n="children">
			</param>
			<param t="n" n="index">
			</param>
		</method>
		<method n="TAdd" id="100664063" rt="v" mod="0">
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="child">
			</param>
		</method>
		<method n="TAddOperatorToken" id="100664064" rt="v" mod="P">
			<param t="TGreenZoneParser.Lexer.Token" n="child">
			</param>
		</method>
		<method n="TSubToc" id="100664065" rt="TGreenZoneParser.Lexer.TokenOpenClose" mod="P">
			<param t="TGreenZoneParser.Lexer.Token" n="openToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="closeToken">
			</param>
		</method>
		<method n="TopTknRw" id="100664066" rt="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="0">
			<param t="TGreenZoneParser.Lexer.TokenId" n="operatorTokenId">
			</param>
		</method>
		<method n="TToString" id="100664067" rt="X" mod="oP">
		</method>
		<prop n="Type" id="385876242" t="TGreenZoneParser.Lexer.TokenOpenCloseType" r="True" w="False" mod="P">
		</prop>
		<prop n="OpenToken" id="385876243" t="TGreenZoneParser.Lexer.Token" r="True" w="True" mod="P" set-mod="i">
		</prop>
		<prop n="CloseToken" id="385876244" t="TGreenZoneParser.Lexer.Token" r="True" w="True" mod="P" set-mod="i">
		</prop>
		<prop n="Parent" id="385876245" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="Children" id="385876246" t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="ChildrenBlock" id="385876247" t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="ChildrenArray" id="385876248" t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="ChildrenParen" id="385876249" t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="ChildrenGeneric" id="385876250" t="G1TGreenZoneParser.Lexer.TokenOpenClose;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Semicolons" id="385876251" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Commas" id="385876252" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Assigns" id="385876253" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="PlusAssigns" id="385876254" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="MinusAssigns" id="385876255" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="MulAssigns" id="385876256" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="PerAssigns" id="385876257" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="XorAssigns" id="385876258" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="AndAssigns" id="385876259" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="OrAssigns" id="385876260" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="ModAssigns" id="385876261" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="LsAssigns" id="385876262" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="RsAssigns" id="385876263" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Qmarks" id="385876264" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Colons" id="385876265" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="OrOrs" id="385876266" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="AndAnds" id="385876267" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Ors" id="385876268" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Xors" id="385876269" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Ands" id="385876270" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Equalss" id="385876271" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="NonEqualss" id="385876272" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Lts" id="385876273" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Gts" id="385876274" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Les" id="385876275" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Ges" id="385876276" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Iss" id="385876277" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Ass" id="385876278" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Lss" id="385876279" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Rss" id="385876280" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Pluss" id="385876281" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Minuss" id="385876282" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Muls" id="385876283" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Pers" id="385876284" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Mods" id="385876285" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Nots" id="385876286" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Bwnots" id="385876287" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="PlusPluss" id="385876288" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="MinusMinuss" id="385876289" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Wheres" id="385876290" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Ins" id="385876291" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Points" id="385876292" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Index" id="385876293" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="BlockIndex" id="385876294" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="ArrayIndex" id="385876295" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="ParenIndex" id="385876296" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="GenericIndex" id="385876297" t="n" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TClassDefStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554549" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.RefTypeDefStatementNode" id="33554451"/>
		<constr id="100664068" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.UserTypeSpecifierNode" n="typeDefinitionMain">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.List" n="supertypes">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TDestructorDefStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554550" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.BaseMethodStatementNode" id="33554490"/>
		<constr id="100664069" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="identifierToken">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="parens">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.VarDeclArgumentNode;System.Collections.Generic.List" n="argumentList">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TAtomicExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554551" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.IdentifierNode" id="33554523"/>
		<field n="pointToken" id="67109552" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="fieldIdentifier" id="67109553" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<constr id="100664070" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="pointToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="fieldIdentifier">
			</param>
		</constr>
		<prop n="PointToken" id="385876298" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="FieldIdentifier" id="385876299" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TLinqSelectExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554552" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.LinqFootExpressionNode" id="33554502"/>
		<field n="selectExpression" id="67109554" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100664073" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="selectExpression">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="SelectExpression" id="385876300" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TTokenMatchState" ns="GreenZoneParser.Lexer" id="33554553" mod="eP" t="en">
		<base n="n" id="33554686"/>
		<item n="NO_MATCH" v="0"/>
		<item n="STARTED" v="1"/>
		<item n="MATCHED" v="2"/>
		<item n="ERROR" v="3"/>
		<item n="ERROR_NO_BACKSTEP" v="4"/>
	</type>
	<type n="TDoStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554554" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100664075" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TUserTypeSpecifierNode" ns="GreenZoneParser.Parsers.Cs" id="33554555" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" id="33554530"/>
		<field n="name" id="67109561" t="X" mod="r0">
		</field>
		<field n="identifierTokens" id="67109562" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="ri">
		</field>
		<field n="identifierTokensUm" id="67109563" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="typeParameters" id="67109564" t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.List" mod="ri">
		</field>
		<field n="typeParametersUm" id="67109565" t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100664076" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" n="identifierTokens">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.List" n="firstBracketExpressions">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.List" n="typeParameters">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="initializerRanks">
			</param>
			<param t="n" n="commaSeparatedRanks">
			</param>
			<param t="n" n="emptyRanks">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="emptyRanksFirst">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="emptyRanksLast">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="pointerStar">
			</param>
		</constr>
		<prop n="Name" id="385876301" t="X" r="True" w="False" mod="oP">
		</prop>
		<prop n="IsGeneric" id="385876302" t="b" r="True" w="False" mod="oP">
		</prop>
		<prop n="IdentifierTokens" id="385876303" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="TypeParameters" id="385876304" t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TUncheckedNode" ns="GreenZoneParser.Parsers.Cs" id="33554556" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="keywordToken" id="67109566" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="parens" id="67109567" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="r0">
		</field>
		<field n="innerExpression" id="67109568" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100664081" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="parens">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="keywordToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="innerExpression">
			</param>
		</constr>
		<prop n="KeywordToken" id="385876305" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="Parens" id="385876306" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="InnerExpression" id="385876307" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TStatementId" ns="GreenZoneParser.Parsers" id="33554557" mod="eP" t="en">
		<base n="n" id="33554686"/>
		<item n="Unknown" v="0"/>
		<item n="Break" v="1"/>
		<item n="Continue" v="2"/>
		<item n="Catch" v="3"/>
		<item n="Do" v="4"/>
		<item n="Else" v="5"/>
		<item n="Finally" v="6"/>
		<item n="Fixed" v="7"/>
		<item n="ForEach" v="8"/>
		<item n="For" v="9"/>
		<item n="If" v="10"/>
		<item n="Lock" v="11"/>
		<item n="Return" v="12"/>
		<item n="Switch" v="13"/>
		<item n="Throw" v="14"/>
		<item n="Try" v="15"/>
		<item n="UsingBlock" v="16"/>
		<item n="UsingDecl" v="17"/>
		<item n="While" v="18"/>
		<item n="CheckedStatement" v="19"/>
		<item n="UncheckedStatement" v="20"/>
		<item n="ForEachSub" v="21"/>
		<item n="For1or3Sub" v="22"/>
		<item n="ClassDef" v="23"/>
		<item n="DelegateDef" v="24"/>
		<item n="EventDecl" v="25"/>
		<item n="EnumDef" v="26"/>
		<item n="InterfaceDef" v="27"/>
		<item n="NamespaceDef" v="28"/>
		<item n="StructDef" v="29"/>
		<item n="ArrayInitializer" v="30"/>
		<item n="Case" v="31"/>
		<item n="Empty" v="32"/>
		<item n="EnumConstant" v="33"/>
		<item n="FieldDecl" v="34"/>
		<item n="MethodDef" v="35"/>
		<item n="IndexerDef" v="36"/>
		<item n="ConstructorDef" v="37"/>
		<item n="DestructorDef" v="38"/>
		<item n="PropertyDef" v="39"/>
		<item n="PropertyGet" v="40"/>
		<item n="PropertySet" v="41"/>
		<item n="VarDecl" v="42"/>
		<item n="AtomicExpression" v="43"/>
		<item n="Argument" v="44"/>
		<item n="ArrayAccess" v="45"/>
		<item n="ArrayCreation" v="46"/>
		<item n="BinaryOperation" v="47"/>
		<item n="BinaryShiftOperation" v="48"/>
		<item n="Cast" v="49"/>
		<item n="Checked" v="50"/>
		<item n="DefaultExpression" v="51"/>
		<item n="FieldAccessOrId" v="52"/>
		<item n="MethodExpression" v="53"/>
		<item n="ObjectCreation" v="54"/>
		<item n="Paren" v="55"/>
		<item n="SystemType" v="56"/>
		<item n="TernaryOperation" v="57"/>
		<item n="Typeof" v="58"/>
		<item n="UnaryOperation" v="59"/>
		<item n="Unchecked" v="60"/>
		<item n="UserType" v="61"/>
		<item n="VarDeclArgument" v="62"/>
		<item n="Linq" v="63"/>
		<item n="LinqContinuation" v="64"/>
		<item n="LinqFrom" v="65"/>
		<item n="LinqGroupBy" v="66"/>
		<item n="LinqJoin" v="67"/>
		<item n="LinqLet" v="68"/>
		<item n="LinqOrderBy" v="69"/>
		<item n="LinqOrdering" v="70"/>
		<item n="LinqSelect" v="71"/>
		<item n="LinqWhere" v="72"/>
	</type>
	<type n="TStatementIdEx" ns="GreenZoneParser.Parsers" id="33554558" mod="sP" t="cl">
	</type>
	<type n="TPropertySetDefStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554559" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.BaseMethodStatementNode" id="33554490"/>
		<constr id="100664085" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="identifierToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TBinaryShiftOperationNode" ns="GreenZoneParser.Parsers.Cs" id="33554560" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="leftShift" id="67109643" t="b" mod="r0">
		</field>
		<field n="operatorToken1" id="67109644" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="operatorToken2" id="67109645" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="left" id="67109646" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<field n="right" id="67109647" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100664086" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="operatorToken1">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="operatorToken2">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="left">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="right">
			</param>
		</constr>
		<prop n="LeftShift" id="385876308" t="b" r="True" w="False" mod="P">
		</prop>
		<prop n="OperatorToken1" id="385876309" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="OperatorToken2" id="385876310" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="Left" id="385876311" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="Right" id="385876312" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TLinqOrderingType" ns="GreenZoneParser.Parsers.Cs" id="33554561" mod="eP" t="en">
		<base n="n" id="33554686"/>
		<item n="Ascending" v="0"/>
		<item n="Descending" v="1"/>
	</type>
	<type n="TLinqOrderingExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554562" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="expression" id="67109651" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<field n="type" id="67109652" t="TGreenZoneParser.Parsers.Cs.LinqOrderingType" mod="r0">
		</field>
		<constr id="100664092" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="expression">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.LinqOrderingType" n="type">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="Expression" id="385876313" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="Type" id="385876314" t="TGreenZoneParser.Parsers.Cs.LinqOrderingType" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TParserBuf" ns="GreenZoneParser.Reflect" id="33554563" mod="a" t="cl">
		<base-t n="TGreenZoneParser.Parsers.BaseNode" id="33554444"/>
		<field n="parseNode" id="67109653" t="TGreenZoneParser.Parsers.BaseNode" mod="0">
		</field>
		<constr id="100664095" mod="i">
			<param t="TGreenZoneParser.Xml.XmlParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Reflect.ParserBuf" n="parent">
			</param>
		</constr>
		<constr id="100664096" mod="i">
			<param t="TGreenZoneParser.Reflect.ParserBuf" n="parent">
			</param>
		</constr>
		<prop n="ParseNode" id="385876315" t="TGreenZoneParser.Parsers.BaseNode" r="True" w="True" mod="i">
		</prop>
	</type>
	<type n="TParseInfo" ns="GreenZoneParser.Reflect" id="33554564" mod="" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ParserBuf" id="33554563"/>
		<field n="Children" id="67109654" t="G2XTGreenZoneParser.Reflect.ParseInfo;System.Collections.Generic.Dictionary" mod="i">
		</field>
		<field n="UnparsedMembers" id="67109655" t="G1TGreenZoneParser.Xml.XmlNode;System.Collections.Generic.List" mod="i">
		</field>
		<field n="ParentType" id="67109656" t="TGreenZoneParser.Reflect.ParseInfo" mod="i">
		</field>
		<field n="BaseType" id="67109657" t="TGreenZoneParser.Reflect.ParseInfo" mod="i">
		</field>
		<field n="BaseInterfaces" id="67109658" t="G1TGreenZoneParser.Reflect.ParseInfo;System.Collections.Generic.List" mod="i">
		</field>
		<field n="Modifiers" id="67109659" t="TGreenZoneParser.Reflect.ReflModifier" mod="i">
		</field>
		<field n="ElementType" id="67109660" t="TGreenZoneParser.Reflect.ParseInfo" mod="i">
		</field>
		<field n="GenericArgs" id="67109661" t="A1TGreenZoneParser.Reflect.ParseInfo;" mod="i">
		</field>
		<field n="GenericConstraints" id="67109662" t="A1TGreenZoneParser.Reflect.GenericConstraint;" mod="i">
		</field>
		<field n="EnumConstants" id="67109663" t="A1TGreenZoneParser.Reflect.EnumConstant;" mod="i">
		</field>
		<field n="Attributes" id="67109664" t="G1TGreenZoneParser.Reflect.ParseInfo;System.Collections.Generic.List" mod="i">
		</field>
		<field n="AttributeConstrArgs" id="67109665" t="G1TGreenZoneParser.Reflect.AttributeConstrArg;System.Collections.Generic.List" mod="i">
		</field>
		<field n="AttributeNamedArgs" id="67109666" t="G1TGreenZoneParser.Reflect.AttributeConstrArg;System.Collections.Generic.List" mod="i">
		</field>
		<field n="IsArray" id="67109667" t="b" mod="i">
		</field>
		<field n="IsPointer" id="67109668" t="b" mod="i">
		</field>
		<field n="IsGeneric" id="67109669" t="b" mod="i">
		</field>
		<field n="IsGenericArg" id="67109670" t="b" mod="i">
		</field>
		<field n="IsAttribute" id="67109671" t="b" mod="i">
		</field>
		<field n="TpType" id="67109672" t="X" mod="i">
		</field>
		<field n="Namespace" id="67109673" t="X" mod="i">
		</field>
		<field n="Name" id="67109674" t="X" mod="i">
		</field>
		<field n="Id" id="67109675" t="X" mod="i">
		</field>
		<field n="Dims" id="67109676" t="n" mod="i">
		</field>
		<field n="AttrConstrId" id="67109677" t="X" mod="i">
		</field>
		<field n="isGuiSetup" id="67109678" t="b" mod="0">
		</field>
		<constr id="100664099" mod="i">
			<param t="TGreenZoneParser.Reflect.ParserBuf" n="parent">
			</param>
		</constr>
		<constr id="100664100" mod="i">
			<param t="TGreenZoneParser.Xml.XmlParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Reflect.ParserBuf" n="parent">
			</param>
		</constr>
		<method n="TGetFullName" id="100664102" rt="X" mod="0">
			<param t="b" n="isLeaf">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
		</method>
		<method n="TGetGenericId" id="100664104" rt="X" mod="0">
			<param t="b" n="isLeaf">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
		</method>
		<method n="TGetTypeId" id="100664106" rt="X" mod="0">
			<param t="b" n="isLeaf">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
		</method>
		<prop n="FullName" id="385876316" t="X" r="True" w="False" mod="i">
		</prop>
		<prop n="GenericId" id="385876317" t="X" r="True" w="False" mod="i">
		</prop>
		<prop n="TypeId" id="385876318" t="X" r="True" w="False" mod="i">
		</prop>
		<prop n="IsGuiSetup" id="385876319" t="b" r="True" w="True" mod="P">
		</prop>
	</type>
	<type n="TAttributeConstrArg" ns="GreenZoneParser.Reflect" id="33554565" mod="" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ParserBuf" id="33554563"/>
		<field n="Type" id="67109680" t="TGreenZoneParser.Reflect.ParseInfo" mod="i">
		</field>
		<field n="Property" id="67109681" t="X" mod="i">
		</field>
		<field n="Value" id="67109682" t="X" mod="i">
		</field>
		<constr id="100664110" mod="i">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="parent">
			</param>
		</constr>
	</type>
	<type n="TGenericConstraint" ns="GreenZoneParser.Reflect" id="33554566" mod="" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ParserBuf" id="33554563"/>
		<field n="Rule" id="67109683" t="TGreenZoneParser.Reflect.ReflTypeArgSpecialRule" mod="i">
		</field>
		<field n="Type" id="67109684" t="TGreenZoneParser.Reflect.ParseInfo" mod="i">
		</field>
		<constr id="100664111" mod="i">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="parent">
			</param>
		</constr>
	</type>
	<type n="TEnumConstant" ns="GreenZoneParser.Reflect" id="33554567" mod="" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ParserBuf" id="33554563"/>
		<field n="EnumConstName" id="67109685" t="X" mod="i">
		</field>
		<field n="EnumConstValue" id="67109686" t="e" mod="i">
		</field>
		<constr id="100664112" mod="i">
			<param t="TGreenZoneParser.Reflect.ParseInfo" n="parent">
			</param>
		</constr>
	</type>
	<type n="TCharLiteralTokenRule" ns="GreenZoneParser.Lexer" id="33554568" mod="" t="cl">
		<base-t n="TGreenZoneParser.Lexer.TokenRule" id="33554436"/>
		<type n="TGreenZoneParser.Lexer.CharLiteralTokenRule+TCharLiteralMatchState" ns="GreenZoneParser.Lexer" id="33554569" mod="e0" t="en">
			<base n="n" id="33554686"/>
			<item n="NORMAL" v="0"/>
			<item n="FILLED" v="1"/>
			<item n="ESCAPED" v="2"/>
		</type>
		<field n="state" id="67109687" t="TGreenZoneParser.Lexer.CharLiteralTokenRule+TCharLiteralMatchState" mod="0">
		</field>
		<field n="value" id="67109688" t="X" mod="0">
		</field>
		<constr id="100664113" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
		</constr>
		<method n="TReset" id="100664115" rt="v" mod="oi">
		</method>
		<method n="TApply" id="100664116" rt="v" mod="oi">
			<param t="c" n="ch">
			</param>
			<param t="c" n="next_ch">
			</param>
		</method>
		<prop n="Value" id="385876320" t="O" r="True" w="False" mod="oP">
		</prop>
	</type>
	<type n="TXmlTagType" ns="GreenZoneParser.Xml" id="33554570" mod="eP" t="en">
		<base n="n" id="33554686"/>
		<item n="Open" v="0"/>
		<item n="Close" v="1"/>
		<item n="Single" v="2"/>
	</type>
	<type n="TXmlTag" ns="GreenZoneParser.Xml" id="33554571" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.BaseNode" id="33554444"/>
		<field n="name" id="67109697" t="X" mod="r0">
		</field>
		<field n="type" id="67109698" t="TGreenZoneParser.Xml.XmlTagType" mod="r0">
		</field>
		<field n="pair" id="67109699" t="TGreenZoneParser.Xml.XmlTag" mod="0">
		</field>
		<field n="attributes" id="67109700" t="G2XOSystem.Collections.Generic.IDictionary" mod="ri">
		</field>
		<constr id="100664117" mod="i">
			<param t="TGreenZoneParser.Xml.XmlParser" n="parser">
			</param>
			<param t="X" n="name">
			</param>
			<param t="TGreenZoneParser.Xml.XmlTagType" n="type">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="G2XOSystem.Collections.Generic.IDictionary" n="attributes">
			</param>
		</constr>
		<prop n="Name" id="385876321" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="Type" id="385876322" t="TGreenZoneParser.Xml.XmlTagType" r="True" w="False" mod="P">
		</prop>
		<prop n="Pair" id="385876323" t="TGreenZoneParser.Xml.XmlTag" r="True" w="True" mod="P" set-mod="i">
		</prop>
		<prop n="Attributes" id="385876324" t="G2XOSystem.Collections.Generic.IDictionary" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflIndexerProperty" ns="GreenZoneParser.Reflect" id="33554572" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflMember" id="33554464"/>
		<field n="propertyType" id="67109701" t="TGreenZoneParser.Reflect.ReflType" mod="rp">
		</field>
		<field n="propertyMethodType" id="67109702" t="TGreenZoneParser.Reflect.ReflPropertyMethodType" mod="r0">
		</field>
		<field n="setModifiers" id="67109703" t="TGreenZoneParser.Reflect.ReflModifier" mod="r0">
		</field>
		<field n="indexerArgs" id="67109704" t="A1TGreenZoneParser.Reflect.ReflMethodArgDefinition;" mod="rp">
		</field>
		<constr id="100664123" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflType" n="propertyType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflPropertyMethodType" n="propertyMethodType">
			</param>
			<param t="X" n="propertyName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="setModifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflMethodArgDefinition;" n="indexerArgs" p="Params">
				<attrs>
					<attr t="aSystem.ParamArrayAttribute" constr="100667008">
					</attr>
				</attrs>
			</param>
		</constr>
		<prop n="TypeId" id="385876325" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="PropertyType" id="385876326" t="TGreenZoneParser.Reflect.ReflType" r="True" w="False" mod="P">
		</prop>
		<prop n="PropertyMethodType" id="385876327" t="TGreenZoneParser.Reflect.ReflPropertyMethodType" r="True" w="False" mod="P">
		</prop>
		<prop n="SetModifiers" id="385876328" t="TGreenZoneParser.Reflect.ReflModifier" r="True" w="False" mod="P">
		</prop>
		<prop n="IndexerArgs" id="385876329" t="A1TGreenZoneParser.Reflect.ReflMethodArgDefinition;" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TAttributeNode" ns="GreenZoneParser.Parsers.Cs" id="33554573" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.NormalNode" id="33554446"/>
		<constr id="100664129" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="arrayTokens">
			</param>
		</constr>
	</type>
	<type n="TEnumDefStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554574" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.TypeDefStatementNode" id="33554450"/>
		<constr id="100664130" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" n="identifierTokens">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TForEachSubStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554575" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<field n="typeSpecifier" id="67109705" t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" mod="r0">
		</field>
		<field n="identifierTokens" id="67109706" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="identifierTokensUm" id="67109707" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="right" id="67109708" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100664131" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" n="typeSpecifier">
			</param>
			<param t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" n="identifierTokens">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="right">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="TypeSpecifier" id="385876330" t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" r="True" w="False" mod="P">
		</prop>
		<prop n="IdentifierTokens" id="385876331" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="Right" id="385876332" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TCompilerTesterForm" ns="GreenZoneParser" id="33554576" mod="P" t="cl">
		<base-t n="TSystem.Windows.Forms.Form" id="33555464"/>
		<field n="path0" id="67109709" t="X" const="F:\\workspaces\\general_web\\ForexRobots\\windows_dll\\GreenZoneFxEAnalyzer\\GreenZoneFxBaseGEx\\generated" mod="s0">
		</field>
		<field n="components" id="67109710" t="TSystem.ComponentModel.IContainer" mod="0">
		</field>
		<field n="compileButton" id="67109711" t="TSystem.Windows.Forms.Button" mod="0">
		</field>
		<field n="splitContainer2" id="67109712" t="TGreenZoneUtil.Gui.SplitContainerEx" mod="0">
		</field>
		<field n="treeView1" id="67109713" t="TSystem.Windows.Forms.TreeView" mod="0">
		</field>
		<field n="splitContainer3" id="67109714" t="TGreenZoneUtil.Gui.SplitContainerEx" mod="0">
		</field>
		<field n="errorsTable" id="67109715" t="TSystem.Windows.Forms.DataGridView" mod="0">
		</field>
		<field n="tabControl1" id="67109716" t="TSystem.Windows.Forms.TabControl" mod="0">
		</field>
		<field n="pathTab" id="67109717" t="TSystem.Windows.Forms.TabPage" mod="0">
		</field>
		<field n="splitContainer1" id="67109718" t="TGreenZoneUtil.Gui.SplitContainerEx" mod="0">
		</field>
		<field n="removeXmlButton" id="67109719" t="TSystem.Windows.Forms.Button" mod="0">
		</field>
		<field n="label1" id="67109720" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="addXmlButton" id="67109721" t="TSystem.Windows.Forms.Button" mod="0">
		</field>
		<field n="xmlTable" id="67109722" t="TSystem.Windows.Forms.DataGridView" mod="0">
		</field>
		<field n="XmlPathColumn" id="67109723" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="XmlFileColumn" id="67109724" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="removeCsButton" id="67109725" t="TSystem.Windows.Forms.Button" mod="0">
		</field>
		<field n="label2" id="67109726" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="addCsButton" id="67109727" t="TSystem.Windows.Forms.Button" mod="0">
		</field>
		<field n="csTable" id="67109728" t="TSystem.Windows.Forms.DataGridView" mod="0">
		</field>
		<field n="CsPathColumn" id="67109729" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="CsFileColumn" id="67109730" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="sourceTab" id="67109731" t="TSystem.Windows.Forms.TabPage" mod="0">
		</field>
		<field n="sourceTextBox" id="67109732" t="TGreenZoneParser.RichTextBoxEx" mod="0">
		</field>
		<field n="fileTextBox" id="67109733" t="TSystem.Windows.Forms.TextBox" mod="0">
		</field>
		<field n="errorMessageColumn" id="67109734" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="ErrorFileColumn" id="67109735" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="ErrorLineColumn" id="67109736" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="ErrorColumnColumn" id="67109737" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="ErrorObjectColumn" id="67109738" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="posLabel" id="67109739" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="lineLabel" id="67109740" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="colLabel" id="67109741" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="preParsePhaseChb" id="67109742" t="TSystem.Windows.Forms.CheckBox" mod="0">
		</field>
		<field n="xmlParserBinders" id="67109743" t="G2TGreenZoneParser.Xml.XmlParser;TGreenZoneParser.CompilerGuiBinder;System.Collections.Generic.Dictionary" mod="r0">
		</field>
		<field n="resolver" id="67109744" t="TGreenZoneParser.Reflect.Resolver" mod="0">
		</field>
		<method n="TDispose" id="100664135" rt="v" mod="op">
			<param t="b" n="disposing">
			</param>
		</method>
		<method n="TInitializeComponent" id="100664136" rt="v" mod="0">
		</method>
		<constr id="100664137" mod="P">
		</constr>
		<method n="Tdt" id="100664138" rt="X" mod="0">
		</method>
		<method n="TcompileButton_Click" id="100664139" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TremoveXmlButton_Click" id="100664140" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TaddXmlButton_Click" id="100664141" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
	</type>
	<type n="TMethodDefStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554577" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.BaseMethodStatementNode" id="33554490"/>
		<field n="typeParameters" id="67109745" t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="typeParametersUm" id="67109746" t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100664142" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" n="typeExpression">
			</param>
			<param t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" n="identifierTokens">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="parens">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.VarDeclArgumentNode;System.Collections.Generic.List" n="argumentList">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.List" n="typeParameters">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="TypeParameters" id="385876333" t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TLinqHeadExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554578" mod="aP" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<constr id="100664144" mod="P">
			<param t="TGreenZoneParser.Parsers.StatementId" n="id">
			</param>
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TLinqLetExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554579" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.LinqHeadExpressionNode" id="33554578"/>
		<field n="identifier" id="67109747" t="TGreenZoneParser.Parsers.Cs.AtomicExpressionNode" mod="r0">
		</field>
		<field n="expression" id="67109748" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100664145" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.AtomicExpressionNode" n="identifier">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="expression">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="Identifier" id="385876334" t="TGreenZoneParser.Parsers.Cs.AtomicExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="Expression" id="385876335" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TCsParser" ns="GreenZoneParser" id="33554580" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parser" id="33554476"/>
		<field n="tokenizer" id="67109749" t="TGreenZoneParser.CsTokenizer" mod="r0">
		</field>
		<constr id="100664148" mod="P">
			<param t="X" n="fileName">
			</param>
			<param t="X" n="fileContent">
			</param>
		</constr>
		<method n="TParse" id="100664151" rt="TGreenZoneParser.Parsers.BaseNode" mod="oP">
		</method>
		<method n="Tdt" id="100664152" rt="X" mod="0">
		</method>
		<prop n="Tokenizer" id="385876336" t="TGreenZoneParser.Tokenizer" r="True" w="False" mod="oP">
		</prop>
		<prop n="CsTokenizer" id="385876337" t="TGreenZoneParser.CsTokenizer" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflPointerType" ns="GreenZoneParser.Reflect" id="33554581" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflType" id="33554468"/>
		<field n="elementType" id="67109750" t="TGreenZoneParser.Reflect.ReflType" mod="r0">
		</field>
		<constr id="100664153" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflType" n="elementType">
			</param>
		</constr>
		<prop n="TypeId" id="385876338" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="ElementType" id="385876339" t="TGreenZoneParser.Reflect.ReflType" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TSimpleTokenRule" ns="GreenZoneParser.Lexer" id="33554582" mod="" t="cl">
		<base-t n="TGreenZoneParser.Lexer.TokenRule" id="33554436"/>
		<field n="cursor" id="67109751" t="n" mod="0">
		</field>
		<field n="token" id="67109752" t="X" mod="r0">
		</field>
		<constr id="100664156" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenId" n="tokenId">
			</param>
			<param t="X" n="token">
			</param>
		</constr>
		<method n="TReset" id="100664158" rt="v" mod="oi">
		</method>
		<method n="TApply" id="100664159" rt="v" mod="oi">
			<param t="c" n="ch">
			</param>
			<param t="c" n="next_ch">
			</param>
		</method>
		<prop n="CurrentTokenContent" id="385876340" t="X" r="True" w="False" mod="oP">
		</prop>
	</type>
	<type n="TStringLiteralTokenRule" ns="GreenZoneParser.Lexer" id="33554583" mod="" t="cl">
		<base-t n="TGreenZoneParser.Lexer.TokenRule" id="33554436"/>
		<type n="TGreenZoneParser.Lexer.StringLiteralTokenRule+TStringLiteralMatchState" ns="GreenZoneParser.Lexer" id="33554584" mod="e0" t="en">
			<base n="n" id="33554686"/>
			<item n="NORMAL" v="0"/>
			<item n="ESCAPED" v="1"/>
		</type>
		<field n="state" id="67109753" t="TGreenZoneParser.Lexer.StringLiteralTokenRule+TStringLiteralMatchState" mod="0">
		</field>
		<field n="quote" id="67109754" t="c" mod="r0">
		</field>
		<field n="value" id="67109755" t="X" mod="0">
		</field>
		<constr id="100664160" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
		</constr>
		<constr id="100664161" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="c" n="quote">
			</param>
		</constr>
		<method n="TReset" id="100664163" rt="v" mod="oi">
		</method>
		<method n="TApply" id="100664164" rt="v" mod="oi">
			<param t="c" n="ch">
			</param>
			<param t="c" n="next_ch">
			</param>
		</method>
		<prop n="Value" id="385876341" t="O" r="True" w="False" mod="oP">
		</prop>
	</type>
	<type n="TReflEventRemove" ns="GreenZoneParser.Reflect" id="33554585" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflMethodBase" id="33554466"/>
		<field n="parent" id="67109759" t="TGreenZoneParser.Reflect.ReflEvent" mod="r0">
		</field>
		<constr id="100664165" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflEvent" n="parent">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
		</constr>
		<prop n="TypeId" id="385876342" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="Parent" id="385876343" t="TGreenZoneParser.Reflect.ReflEvent" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TForEachStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554586" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100664168" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TArrayInitializerNode" ns="GreenZoneParser.Parsers.Cs" id="33554587" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<field n="initializerExpression" id="67109760" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<field n="initializerBlock" id="67109761" t="TGreenZoneParser.Parsers.Cs.BlockNode" mod="r0">
		</field>
		<constr id="100664169" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="initializerExpression">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="InitializerExpression" id="385876344" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="InitializerBlock" id="385876345" t="TGreenZoneParser.Parsers.Cs.BlockNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TLinqContinuationExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554588" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="intoIdentifier" id="67109762" t="TGreenZoneParser.Parsers.Cs.AtomicExpressionNode" mod="r0">
		</field>
		<field n="joins" id="67109763" t="G1TGreenZoneParser.Parsers.Cs.LinqJoinExpressionNode;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="joinsUm" id="67109764" t="G1TGreenZoneParser.Parsers.Cs.LinqJoinExpressionNode;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="linqExpression" id="67109765" t="TGreenZoneParser.Parsers.Cs.LinqExpressionNode" mod="r0">
		</field>
		<constr id="100664172" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.AtomicExpressionNode" n="intoIdentifier">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.LinqJoinExpressionNode;System.Collections.Generic.List" n="joins">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.LinqExpressionNode" n="linqExpression">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="IntoIdentifier" id="385876346" t="TGreenZoneParser.Parsers.Cs.AtomicExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="Joins" id="385876347" t="G1TGreenZoneParser.Parsers.Cs.LinqJoinExpressionNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="LinqExpression" id="385876348" t="TGreenZoneParser.Parsers.Cs.LinqExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TParseTesterForm" ns="GreenZoneParser" id="33554589" mod="P" t="cl">
		<base-t n="TSystem.Windows.Forms.Form" id="33555464"/>
		<base-i n="TSystem.Windows.Forms.IMessageFilter" id="33555020"/>
		<field n="WH_KEYBOARD_LL" id="67109766" t="n" const="13" mod="s0">
		</field>
		<field n="WM_KEYDOWN" id="67109767" t="n" const="256" mod="s0">
		</field>
		<field n="components" id="67109768" t="TSystem.ComponentModel.IContainer" mod="0">
		</field>
		<field n="sourceTextBox" id="67109769" t="TGreenZoneParser.RichTextBoxEx" mod="0">
		</field>
		<field n="fileTextBox" id="67109770" t="TSystem.Windows.Forms.TextBox" mod="0">
		</field>
		<field n="browseCsButton" id="67109771" t="TSystem.Windows.Forms.Button" mod="0">
		</field>
		<field n="loadButton" id="67109772" t="TSystem.Windows.Forms.Button" mod="0">
		</field>
		<field n="errorsTable" id="67109773" t="TSystem.Windows.Forms.DataGridView" mod="0">
		</field>
		<field n="infoLabel" id="67109774" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="splitContainer1" id="67109775" t="TGreenZoneUtil.Gui.SplitContainerEx" mod="0">
		</field>
		<field n="parseButton" id="67109776" t="TSystem.Windows.Forms.Button" mod="0">
		</field>
		<field n="tabControl1" id="67109777" t="TSystem.Windows.Forms.TabControl" mod="0">
		</field>
		<field n="errorsTab" id="67109778" t="TSystem.Windows.Forms.TabPage" mod="0">
		</field>
		<field n="tokensTab" id="67109779" t="TSystem.Windows.Forms.TabPage" mod="0">
		</field>
		<field n="tokensTable" id="67109780" t="TSystem.Windows.Forms.DataGridView" mod="0">
		</field>
		<field n="columnLabel" id="67109781" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="lineLabel" id="67109782" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="errorMessageColumn" id="67109783" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="ErrorLineColumn" id="67109784" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="ErrorColumnColumn" id="67109785" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="ErrorLengthColumn" id="67109786" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="ErrorPositionColumn" id="67109787" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="debugTokensChb" id="67109788" t="TSystem.Windows.Forms.CheckBox" mod="0">
		</field>
		<field n="errLabel" id="67109789" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="tkLabel" id="67109790" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="nlLabel" id="67109791" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="clearTablesBtn" id="67109792" t="TSystem.Windows.Forms.Button" mod="0">
		</field>
		<field n="splitContainer2" id="67109793" t="TGreenZoneUtil.Gui.SplitContainerEx" mod="0">
		</field>
		<field n="treeView1" id="67109794" t="TSystem.Windows.Forms.TreeView" mod="0">
		</field>
		<field n="debugParseChb" id="67109795" t="TSystem.Windows.Forms.CheckBox" mod="0">
		</field>
		<field n="menuStrip1" id="67109796" t="TSystem.Windows.Forms.MenuStrip" mod="0">
		</field>
		<field n="editToolStripMenuItem" id="67109797" t="TSystem.Windows.Forms.ToolStripMenuItem" mod="0">
		</field>
		<field n="searchToolStripMenuItem" id="67109798" t="TSystem.Windows.Forms.ToolStripMenuItem" mod="0">
		</field>
		<field n="posLabel" id="67109799" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="TokenNameColumn" id="67109800" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="TokenIdColumn" id="67109801" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="TokenLineColumn" id="67109802" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="TokenColumnColumn" id="67109803" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="TokenLengthColumn" id="67109804" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="TokenIndexColumn" id="67109805" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="TokenPositionColumn" id="67109806" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="addNodeLabel" id="67109807" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="prodLabel" id="67109808" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="curProdInfLabel" id="67109809" t="TSystem.Windows.Forms.Label" mod="0">
		</field>
		<field n="breakPointBar" id="67109810" t="TSystem.Windows.Forms.Panel" mod="0">
		</field>
		<field n="ErrorObjectColumn" id="67109811" t="TSystem.Windows.Forms.DataGridViewTextBoxColumn" mod="0">
		</field>
		<field n="stepButton" id="67109812" t="TSystem.Windows.Forms.Button" mod="0">
		</field>
		<field n="browseXmlButton" id="67109813" t="TSystem.Windows.Forms.Button" mod="0">
		</field>
		<field n="showTokensChb" id="67109814" t="TSystem.Windows.Forms.CheckBox" mod="0">
		</field>
		<field n="parser" id="67109815" t="TGreenZoneParser.Parser" mod="0">
		</field>
		<field n="tokenAdded" id="67109816" t="TGreenZoneParser.Parser+TTokenEventHandler" mod="0">
		</field>
		<field n="newlineAdded" id="67109817" t="TGreenZoneParser.Parser+TTokenPosEventHandler" mod="0">
		</field>
		<field n="tokenRead" id="67109818" t="TGreenZoneParser.Parser+TTokenPosEventHandler" mod="0">
		</field>
		<field n="nodeCreated" id="67109819" t="TGreenZoneParser.Parser+TNodeEventHandler" mod="0">
		</field>
		<field n="nodeAdded" id="67109820" t="TGreenZoneParser.Parser+TNodeEventHandler" mod="0">
		</field>
		<field n="errorAdded" id="67109821" t="TGreenZoneParser.Parser+TErrorEventHandler" mod="0">
		</field>
		<field n="tmpErrorAdded" id="67109822" t="TGreenZoneParser.Parser+TErrorEventHandler" mod="0">
		</field>
		<field n="breakPoints" id="67109823" t="G1nSystem.Collections.Generic.SortedSet" mod="r0">
		</field>
		<field n="bpBrush" id="67109824" t="TSystem.Drawing.Brush" mod="0">
		</field>
		<field n="bpInaBrush" id="67109825" t="TSystem.Drawing.Brush" mod="0">
		</field>
		<field n="parserGuiBinder" id="67109826" t="TGreenZoneParser.ParserGuiBinder" mod="0">
		</field>
		<method n="TDispose" id="100664176" rt="v" mod="op">
			<param t="b" n="disposing">
			</param>
		</method>
		<method n="TInitializeComponent" id="100664177" rt="v" mod="0">
		</method>
		<constr id="100664178" mod="P">
		</constr>
		<method n="TGoToLine" id="100664183" rt="v" mod="i">
			<param t="n" n="line">
			</param>
		</method>
		<method n="TSearch" id="100664184" rt="b" mod="i">
			<param t="X" n="text">
			</param>
			<param t="TSystem.StringComparison" n="comp">
			</param>
		</method>
		<method n="TShowSearchDialog" id="100664185" rt="v" mod="0">
		</method>
		<method n="TForm1_Load" id="100664186" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TloadButton_Click" id="100664187" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TparseButton_Click" id="100664188" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TstepButton_Click" id="100664189" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="Tparser_ErrorAdded" id="100664190" rt="v" mod="0">
			<param t="X" n="info">
			</param>
			<param t="TGreenZoneParser.CompilationErrorEnty" n="err">
			</param>
			<param t="b" n="sync">
			</param>
		</method>
		<method n="Tparser_NewLineAdded" id="100664191" rt="v" mod="0">
			<param t="n" n="position">
			</param>
			<param t="b" n="sync">
			</param>
		</method>
		<method n="Tparser_TokenRead" id="100664192" rt="v" mod="0">
			<param t="n" n="position">
			</param>
			<param t="b" n="sync">
			</param>
		</method>
		<method n="Tparserr_TokenAdded" id="100664193" rt="v" mod="0">
			<param t="TGreenZoneParser.Lexer.Token" n="token">
			</param>
			<param t="b" n="sync">
			</param>
		</method>
		<method n="Tparser_NodeCreated" id="100664194" rt="v" mod="0">
			<param t="TGreenZoneParser.Parsers.BaseNode" n="child">
			</param>
			<param t="b" n="sync">
			</param>
		</method>
		<method n="Tparser_TmpErrorAdded" id="100664195" rt="v" mod="0">
			<param t="X" n="info">
			</param>
			<param t="TGreenZoneParser.CompilationErrorEnty" n="err">
			</param>
			<param t="b" n="sync">
			</param>
		</method>
		<method n="Tparser_NodeAdded" id="100664196" rt="v" mod="0">
			<param t="TGreenZoneParser.Parsers.BaseNode" n="node">
			</param>
			<param t="b" n="sync">
			</param>
		</method>
		<method n="TStartParse" id="100664197" rt="v" mod="0">
		</method>
		<method n="TclearTablesBtn_Click" id="100664198" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TbrowseCsButton_Click" id="100664199" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TbrowseXmlButton_Click" id="100664200" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TerrLabel_Click" id="100664201" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TtkLabel_Click" id="100664202" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TdebugChb_CheckedChanged" id="100664203" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TdebugParseChb_CheckedChanged" id="100664204" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TsearchToolStripMenuItem_Click" id="100664205" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<method n="TPreFilterMessage" id="100664206" rt="b" mod="vP">
			<param t="TSystem.Windows.Forms.Message" n="m">
			</param>
		</method>
		<method n="TbreakPointBar_Paint" id="100664207" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.Windows.Forms.PaintEventArgs" n="e">
			</param>
		</method>
		<method n="TsourceTextBox_Paint" id="100664208" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.Windows.Forms.PaintEventArgs" n="e">
			</param>
		</method>
		<method n="TbreakPointBar_Click" id="100664209" rt="v" mod="0">
			<param t="O" n="sender">
			</param>
			<param t="TSystem.EventArgs" n="e">
			</param>
		</method>
		<prop n="LineCount" id="385876349" t="n" r="True" w="False" mod="i">
		</prop>
		<prop n="ControlsEnabled" id="385876350" t="b" r="True" w="True" mod="0">
		</prop>
		<prop n="Debugging" id="385876351" t="b" r="True" w="False" mod="0">
		</prop>
	</type>
	<type n="TCompilerGuiBinder" ns="GreenZoneParser" id="33554590" mod="" t="cl">
		<base-t n="TGreenZoneParser.TesterGuiBinder" id="33554512"/>
		<constr id="100664210" mod="i">
			<param t="TSystem.Windows.Forms.TextBox" n="fileTextBox">
			</param>
			<param t="TGreenZoneParser.RichTextBoxEx" n="sourceTextBox">
			</param>
			<param t="TSystem.Windows.Forms.TreeView" n="treeView1">
			</param>
			<param t="TSystem.Windows.Forms.DataGridView" n="errorsTable">
			</param>
			<param t="TSystem.Windows.Forms.Label" n="posLabel">
			</param>
			<param t="TSystem.Windows.Forms.Label" n="lineLabel">
			</param>
			<param t="TSystem.Windows.Forms.Label" n="columnLabel">
			</param>
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
		</constr>
		<method n="TAddError" id="100664211" rt="n" mod="oi">
			<param t="TGreenZoneParser.CompilationErrorEnty" n="err">
			</param>
			<param t="b" n="pending">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
		</method>
	</type>
	<type n="TReflMethod" ns="GreenZoneParser.Reflect" id="33554591" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflMethodBaseGen" id="33554507"/>
		<field n="returnType" id="67109827" t="TGreenZoneParser.Reflect.ReflType" mod="r0">
		</field>
		<constr id="100664212" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflType" n="returnType">
			</param>
			<param t="X" n="methodName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflMethodArgDefinition;" n="methodArgs" p="Params">
				<attrs>
					<attr t="aSystem.ParamArrayAttribute" constr="100667008">
					</attr>
				</attrs>
			</param>
		</constr>
		<method n="TApplyGenericArgs" id="100664216" rt="TGreenZoneParser.Reflect.ReflMethod" mod="i">
			<param t="A1TGreenZoneParser.Reflect.ReflTypeArg;" n="genericTypeArgs">
			</param>
		</method>
		<prop n="TypeId" id="385876352" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="ReturnType" id="385876353" t="TGreenZoneParser.Reflect.ReflType" r="True" w="False" mod="P">
		</prop>
		<prop n="DeclaringType" id="385876354" t="TGreenZoneParser.Reflect.ReflObjType" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflModifier" ns="GreenZoneParser.Reflect" id="33554592" mod="eP" t="en">
		<attrs>
			<attr t="aSystem.FlagsAttribute" constr="100666440">
			</attr>
		</attrs>
		<base n="n" id="33554686"/>
		<item n="Static" v="1"/>
		<item n="Abstract" v="2"/>
		<item n="Sealed" v="4"/>
		<item n="Override" v="8"/>
		<item n="Virtual" v="16"/>
		<item n="Const" v="32"/>
		<item n="Readonly" v="64"/>
		<item n="Volatile" v="128"/>
		<item n="Public" v="256"/>
		<item n="Internal" v="512"/>
		<item n="Protected" v="1024"/>
		<item n="Private" v="2048"/>
	</type>
	<type n="TProgram" ns="GreenZoneParser" id="33554593" mod="s" t="cl">
		<method n="TAllocConsole" id="100664217" rt="b" mod="s0">
			<attrs>
				<attr t="aSystem.Runtime.InteropServices.DllImportAttribute" constr="100678650">
					<args>
						<arg t="X" v="Kernel32.dll"/>
					</args>
					<named-args>
						<arg t="X" v="AllocConsole" p="EntryPoint"/>
						<arg t="TSystem.Runtime.InteropServices.CharSet" v="1" p="CharSet"/>
						<arg t="b" v="False" p="ExactSpelling"/>
						<arg t="b" v="False" p="SetLastError"/>
						<arg t="b" v="True" p="PreserveSig"/>
						<arg t="TSystem.Runtime.InteropServices.CallingConvention" v="1" p="CallingConvention"/>
						<arg t="b" v="False" p="BestFitMapping"/>
						<arg t="b" v="False" p="ThrowOnUnmappableChar"/>
					</named-args>
				</attr>
				<attr t="aSystem.Runtime.InteropServices.PreserveSigAttribute" constr="100678637">
				</attr>
			</attrs>
		</method>
		<method n="TMain" id="100664218" rt="v" mod="s0">
			<attrs>
				<attr t="aSystem.STAThreadAttribute" constr="100668152">
				</attr>
			</attrs>
		</method>
	</type>
	<type n="TStatementParseMode" ns="GreenZoneParser.Parsers.Cs" id="33554594" mod="eP" t="en">
		<base n="n" id="33554686"/>
		<item n="Header" v="0"/>
		<item n="Inside" v="1"/>
	</type>
	<type n="TPrimaryExpressionParse" ns="GreenZoneParser.Parsers.Cs" id="33554595" mod="e" t="en">
		<base n="n" id="33554686"/>
		<item n="Field" v="0"/>
		<item n="Method" v="1"/>
		<item n="Array" v="2"/>
	</type>
	<type n="TBlockNode" ns="GreenZoneParser.Parsers.Cs" id="33554596" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ControlNode" id="33554448"/>
		<field n="substatIds" id="67109848" t="G1TGreenZoneParser.Lexer.TokenId;System.Collections.Generic.SortedSet" mod="sr0">
		</field>
		<field n="otherBlockIds" id="67109849" t="G1TGreenZoneParser.Lexer.TokenId;System.Collections.Generic.SortedSet" mod="sr0">
		</field>
		<field n="blockTokens" id="67109850" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="r0">
		</field>
		<field n="parseMode" id="67109851" t="TGreenZoneParser.Parsers.Cs.BlockParseMode" mod="r0">
		</field>
		<field n="headStatement" id="67109852" t="TGreenZoneParser.Parsers.Cs.StatementNode" mod="r0">
		</field>
		<field n="controlNodes" id="67109853" t="G1TGreenZoneParser.Parsers.Cs.ControlNode;System.Collections.Generic.List" mod="r0">
		</field>
		<constr id="100664219" mod="s0">
		</constr>
		<constr id="100664220" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="blockTokens">
			</param>
			<param t="b" n="includesBlockOpCl">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="headerFirstToken">
			</param>
			<param t="n" n="level">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockParseMode" n="parseMode">
			</param>
		</constr>
		<method n="TParseStatements" id="100664226" rt="G1TGreenZoneParser.Parsers.Cs.StatementNode;System.Collections.Generic.List" mod="p">
			<param t="TGreenZoneParser.Lexer.Token" n="from">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="to">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="nextToken">
			</param>
		</method>
		<method n="TParseCaseStatements" id="100664227" rt="G1TGreenZoneParser.Parsers.Cs.StatementNode;System.Collections.Generic.List" mod="p">
			<param t="TGreenZoneParser.Lexer.Token" n="from">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="to">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="nextToken">
			</param>
		</method>
		<method n="TParseStatement" id="100664228" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="p">
			<param t="TGreenZoneParser.Lexer.Token" n="firstToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="lastToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="statementParseMode">
			</param>
		</method>
		<method n="TParseStatement" id="100664229" rt="TGreenZoneParser.Parsers.Cs.StatementNode" mod="p">
			<param t="TGreenZoneParser.Lexer.Token" n="firstToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="lastToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="statementParseMode">
			</param>
		</method>
		<method n="TgetStatementOrCommaTokens" id="100664230" rt="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="p">
		</method>
		<method n="TgetStatementOrCommaIndex" id="100664231" rt="n" mod="p">
			<param t="TGreenZoneParser.Lexer.Token" n="token">
			</param>
		</method>
		<method n="TgetStatementOrCommaId" id="100664232" rt="TGreenZoneParser.Lexer.TokenId" mod="p">
		</method>
		<method n="TsetSpecialParseMode" id="100664233" rt="v" mod="p">
			<param t="TGreenZoneParser.Parsers.Cs.BlockParseMode" n="parseMode">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="firstHeadStatementToken">
			</param>
		</method>
		<method n="TgetSubStatementChildParseMode" id="100664234" rt="TGreenZoneParser.Parsers.Cs.BlockParseMode" mod="si">
			<param t="TGreenZoneParser.Lexer.Token" n="firstToken">
			</param>
		</method>
		<prop n="BlockTokens" id="385876355" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="ParseMode" id="385876356" t="TGreenZoneParser.Parsers.Cs.BlockParseMode" r="True" w="False" mod="P">
		</prop>
		<prop n="HeadStatement" id="385876357" t="TGreenZoneParser.Parsers.Cs.StatementNode" r="True" w="False" mod="P">
		</prop>
		<prop n="ControlNodes" id="385876358" t="G1TGreenZoneParser.Parsers.Cs.ControlNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="TypeName" id="385876359" t="X" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TMainBlockNode" ns="GreenZoneParser.Parsers.Cs" id="33554597" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.BlockNode" id="33554596"/>
		<constr id="100664235" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
		</constr>
	</type>
	<type n="TVarDeclStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554598" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<field n="typeSpecifier" id="67109854" t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" mod="r0">
		</field>
		<field n="variables" id="67109855" t="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="variablesUm" id="67109856" t="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100664236" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" n="typeSpecifier">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.List" n="variables">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="TypeSpecifier" id="385876360" t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" r="True" w="False" mod="P">
		</prop>
		<prop n="Variables" id="385876361" t="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TInterfaceDefStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554599" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.RefTypeDefStatementNode" id="33554451"/>
		<constr id="100664239" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.UserTypeSpecifierNode" n="typeDefinitionMain">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.List" n="supertypes">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TArrayCreationNode" ns="GreenZoneParser.Parsers.Cs" id="33554600" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="typeExpression" id="67109857" t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" mod="r0">
		</field>
		<field n="newToken" id="67109858" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="arrayInitializerBlock" id="67109859" t="TGreenZoneParser.Parsers.Cs.BlockNode" mod="r0">
		</field>
		<constr id="100664240" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" n="typeExpression">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="newToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="lastToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="arrayInitializerBlock">
			</param>
		</constr>
		<prop n="TypeExpression" id="385876362" t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" r="True" w="False" mod="P">
		</prop>
		<prop n="NewToken" id="385876363" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="ArrayInitializerBlock" id="385876364" t="TGreenZoneParser.Parsers.Cs.BlockNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TContinueStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554601" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100664244" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TLinqWhereExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554602" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.LinqHeadExpressionNode" id="33554578"/>
		<field n="expression" id="67109860" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100664245" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="expression">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="Expression" id="385876365" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TParserGuiBinder" ns="GreenZoneParser" id="33554603" mod="" t="cl">
		<base-t n="TGreenZoneParser.TesterGuiBinder" id="33554512"/>
		<constr id="100664247" mod="i">
			<param t="TGreenZoneParser.RichTextBoxEx" n="sourceTextBox">
			</param>
			<param t="TSystem.Windows.Forms.TreeView" n="treeView1">
			</param>
			<param t="TSystem.Windows.Forms.DataGridView" n="tokensTable">
			</param>
			<param t="TSystem.Windows.Forms.DataGridView" n="errorsTable">
			</param>
			<param t="TSystem.Windows.Forms.Label" n="posLabel">
			</param>
			<param t="TSystem.Windows.Forms.Label" n="lineLabel">
			</param>
			<param t="TSystem.Windows.Forms.Label" n="columnLabel">
			</param>
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
		</constr>
		<method n="TAddError" id="100664248" rt="n" mod="oi">
			<param t="TGreenZoneParser.CompilationErrorEnty" n="err">
			</param>
			<param t="b" n="pending">
				<attrs>
					<attr t="aSystem.Runtime.InteropServices.OptionalAttribute" constr="100678646">
					</attr>
				</attrs>
			</param>
		</method>
	</type>
	<type n="TCompilationErrorEnty" ns="GreenZoneParser" id="33554604" mod="P" t="cl">
		<base-i n="TSystem.IComparable" id="33554442"/>
		<base-i n="G1TGreenZoneParser.CompilationErrorEnty;System.IComparable" id="33554494"/>
		<field n="parser" id="67109861" t="TGreenZoneParser.Parser" mod="r0">
		</field>
		<field n="message" id="67109862" t="X" mod="r0">
		</field>
		<field n="position" id="67109863" t="n" mod="r0">
		</field>
		<field n="line" id="67109864" t="n" mod="r0">
		</field>
		<field n="column" id="67109865" t="n" mod="r0">
		</field>
		<field n="length" id="67109866" t="n" mod="r0">
		</field>
		<constr id="100664249" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="X" n="message">
			</param>
			<param t="n" n="position">
			</param>
			<param t="n" n="line">
			</param>
			<param t="n" n="column">
			</param>
			<param t="n" n="length">
			</param>
		</constr>
		<method n="TCompareTo" id="100664256" rt="n" mod="vP">
			<param t="O" n="obj">
			</param>
		</method>
		<method n="TCompareTo" id="100664257" rt="n" mod="vP">
			<param t="TGreenZoneParser.CompilationErrorEnty" n="other">
			</param>
		</method>
		<prop n="Parser" id="385876366" t="TGreenZoneParser.Parser" r="True" w="False" mod="P">
		</prop>
		<prop n="Message" id="385876367" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="Position" id="385876368" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="Line" id="385876369" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="Column" id="385876370" t="n" r="True" w="False" mod="P">
		</prop>
		<prop n="Length" id="385876371" t="n" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflPropertyMethodType" ns="GreenZoneParser.Reflect" id="33554605" mod="eP" t="en">
		<base n="n" id="33554686"/>
		<item n="Get" v="0"/>
		<item n="Set" v="1"/>
		<item n="GetSet" v="2"/>
	</type>
	<type n="TReflProperty" ns="GreenZoneParser.Reflect" id="33554606" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflField" id="33554465"/>
		<field n="propertyMethodType" id="67109871" t="TGreenZoneParser.Reflect.ReflPropertyMethodType" mod="r0">
		</field>
		<field n="setModifiers" id="67109872" t="TGreenZoneParser.Reflect.ReflModifier" mod="r0">
		</field>
		<constr id="100664258" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflType" n="propertyType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflPropertyMethodType" n="propertyMethodType">
			</param>
			<param t="X" n="propertyName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="setModifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
		</constr>
		<prop n="TypeId" id="385876372" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="PropertyType" id="385876373" t="TGreenZoneParser.Reflect.ReflType" r="True" w="False" mod="P">
		</prop>
		<prop n="PropertyMethodType" id="385876374" t="TGreenZoneParser.Reflect.ReflPropertyMethodType" r="True" w="False" mod="P">
		</prop>
		<prop n="SetModifiers" id="385876375" t="TGreenZoneParser.Reflect.ReflModifier" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflEventAdd" ns="GreenZoneParser.Reflect" id="33554607" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflMethodBase" id="33554466"/>
		<field n="parent" id="67109873" t="TGreenZoneParser.Reflect.ReflEvent" mod="r0">
		</field>
		<constr id="100664263" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflEvent" n="parent">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
		</constr>
		<prop n="TypeId" id="385876376" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="Parent" id="385876377" t="TGreenZoneParser.Reflect.ReflEvent" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TStructDefStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554608" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.RefTypeDefStatementNode" id="33554451"/>
		<constr id="100664266" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.UserTypeSpecifierNode" n="typeDefinitionMain">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.TypeSpecifierNode;System.Collections.Generic.List" n="supertypes">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TReturnStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554609" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<field n="right" id="67109874" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100664267" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="right">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="Right" id="385876378" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TEnumConstantNode" ns="GreenZoneParser.Parsers.Cs" id="33554610" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<field n="identifierToken" id="67109875" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="right" id="67109876" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100664269" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="identifierToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="right">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="IdentifierToken" id="385876379" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="Right" id="385876380" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TSystemTypeSpecifierNode" ns="GreenZoneParser.Parsers.Cs" id="33554611" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" id="33554530"/>
		<constr id="100664272" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="token">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.List" n="firstBracketExpressions">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="initializerRanks">
			</param>
			<param t="n" n="commaSeparatedRanks">
			</param>
			<param t="n" n="emptyRanks">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="emptyRanksFirst">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="emptyRanksLast">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="pointerStar">
			</param>
		</constr>
		<prop n="Name" id="385876381" t="X" r="True" w="False" mod="oP">
		</prop>
	</type>
	<type n="TCaseStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554612" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<field n="right" id="67109877" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100664274" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="right">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="Right" id="385876382" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TLinqExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554613" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="fromLetWheres" id="67109878" t="G1TGreenZoneParser.Parsers.Cs.LinqHeadExpressionNode;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="fromLetWheresUm" id="67109879" t="G1TGreenZoneParser.Parsers.Cs.LinqHeadExpressionNode;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="orderBy" id="67109880" t="TGreenZoneParser.Parsers.Cs.LinqOrderByExpressionNode" mod="r0">
		</field>
		<field n="selectGroup" id="67109881" t="TGreenZoneParser.Parsers.Cs.LinqFootExpressionNode" mod="r0">
		</field>
		<field n="continuation" id="67109882" t="TGreenZoneParser.Parsers.Cs.LinqContinuationExpressionNode" mod="r0">
		</field>
		<constr id="100664276" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.LinqHeadExpressionNode;System.Collections.Generic.List" n="fromLetWheres">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.LinqOrderByExpressionNode" n="orderBy">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.LinqFootExpressionNode" n="selectGroup">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.LinqContinuationExpressionNode" n="continuation">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="FromLetWheres" id="385876383" t="G1TGreenZoneParser.Parsers.Cs.LinqHeadExpressionNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="OrderBy" id="385876384" t="TGreenZoneParser.Parsers.Cs.LinqOrderByExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="SelectGroup" id="385876385" t="TGreenZoneParser.Parsers.Cs.LinqFootExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="Continuation" id="385876386" t="TGreenZoneParser.Parsers.Cs.LinqContinuationExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflTypeArgSpecialRule" ns="GreenZoneParser.Reflect" id="33554614" mod="eP" t="en">
		<base n="n" id="33554686"/>
		<item n="Type" v="0"/>
		<item n="Class" v="1"/>
		<item n="Struct" v="2"/>
		<item n="New" v="3"/>
		<item n="Cov" v="4"/>
		<item n="Contr" v="5"/>
	</type>
	<type n="TReflTypeArgRule" ns="GreenZoneParser.Reflect" id="33554615" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflBaseNode" id="33554463"/>
		<field n="singleType" id="67109890" t="TGreenZoneParser.Reflect.ReflType" mod="r0">
		</field>
		<field n="specialRule" id="67109891" t="TGreenZoneParser.Reflect.ReflTypeArgSpecialRule" mod="r0">
		</field>
		<constr id="100664281" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflType" n="singleType">
			</param>
		</constr>
		<constr id="100664282" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflTypeArgSpecialRule" n="specialRule">
			</param>
		</constr>
		<prop n="TypeId" id="385876387" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="SingleType" id="385876388" t="TGreenZoneParser.Reflect.ReflType" r="True" w="False" mod="P">
		</prop>
		<prop n="SpecialRule" id="385876389" t="TGreenZoneParser.Reflect.ReflTypeArgSpecialRule" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TBlockParseMode" ns="GreenZoneParser.Parsers.Cs" id="33554616" mod="eP" t="en">
		<base n="n" id="33554686"/>
		<item n="Unspecified" v="0"/>
		<item n="MainBlock" v="1"/>
		<item n="Namespace" v="2"/>
		<item n="ClassOrStruct" v="3"/>
		<item n="Interface" v="4"/>
		<item n="Enum" v="5"/>
		<item n="PropertyOrMethod" v="6"/>
		<item n="Property" v="7"/>
		<item n="Method" v="8"/>
		<item n="Switch" v="9"/>
		<item n="For_Substatements" v="10"/>
		<item n="For1or3_Substatement" v="11"/>
		<item n="Foreach_Substatement" v="12"/>
		<item n="Logical_Substatement" v="13"/>
		<item n="Expression_Substatement" v="14"/>
		<item n="Declaration_Substatement" v="15"/>
		<item n="DeclarationWithAssign_Substatement" v="16"/>
		<item n="ArrayInitializers" v="17"/>
	</type>
	<type n="TNamespaceDefStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554617" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<field n="namespaceId" id="67109911" t="X" mod="r0">
		</field>
		<field n="identifierTokens" id="67109912" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="identifierTokensUm" id="67109913" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100664286" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.List" n="identifierTokens">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="NamespaceId" id="385876390" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="IdentifierTokens" id="385876391" t="G1TGreenZoneParser.Lexer.Token;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TUsingBlockStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554618" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100664289" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TArgumentType" ns="GreenZoneParser.Parsers.Cs" id="33554619" mod="eP" t="en">
		<base n="n" id="33554686"/>
		<item n="Value" v="0"/>
		<item n="Ref" v="1"/>
		<item n="Out" v="2"/>
		<item n="Params" v="3"/>
		<item n="This" v="4"/>
	</type>
	<type n="TArgumentNode" ns="GreenZoneParser.Parsers.Cs" id="33554620" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="type" id="67109920" t="TGreenZoneParser.Parsers.Cs.ArgumentType" mod="r0">
		</field>
		<field n="refToken" id="67109921" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="right" id="67109922" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100664290" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ArgumentType" n="type">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="refToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="right">
			</param>
		</constr>
		<prop n="Type" id="385876392" t="TGreenZoneParser.Parsers.Cs.ArgumentType" r="True" w="False" mod="P">
		</prop>
		<prop n="RefToken" id="385876393" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="Right" id="385876394" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TConstructorDefStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554621" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.BaseMethodStatementNode" id="33554490"/>
		<field n="baseOrThisCall" id="67109923" t="TGreenZoneParser.Parsers.Cs.MethodExpressionNode" mod="r0">
		</field>
		<constr id="100664294" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="identifierToken">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="parens">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.VarDeclArgumentNode;System.Collections.Generic.List" n="argumentList">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.MethodExpressionNode" n="baseOrThisCall">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="BaseOrThisCall" id="385876395" t="TGreenZoneParser.Parsers.Cs.MethodExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TTypeofNode" ns="GreenZoneParser.Parsers.Cs" id="33554622" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="keywordToken" id="67109924" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="parens" id="67109925" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="r0">
		</field>
		<field n="innerExpression" id="67109926" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100664296" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="parens">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="keywordToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="innerExpression">
			</param>
		</constr>
		<prop n="KeywordToken" id="385876396" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="Parens" id="385876397" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="InnerExpression" id="385876398" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TIdentifierTokenRule" ns="GreenZoneParser.Lexer" id="33554623" mod="" t="cl">
		<base-t n="TGreenZoneParser.Lexer.TokenRule" id="33554436"/>
		<field n="specialCharsStart" id="67109927" t="X" mod="r0">
		</field>
		<field n="specialCharsMiddle" id="67109928" t="X" mod="r0">
		</field>
		<constr id="100664300" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="X" n="specialCharsStart">
			</param>
			<param t="X" n="specialCharsMiddle">
			</param>
		</constr>
		<method n="TReset" id="100664301" rt="v" mod="oi">
		</method>
		<method n="TApply" id="100664302" rt="v" mod="oi">
			<param t="c" n="ch">
			</param>
			<param t="c" n="next_ch">
			</param>
		</method>
	</type>
	<type n="TWhiteSpaceTokenRule" ns="GreenZoneParser.Lexer" id="33554624" mod="" t="cl">
		<base-t n="TGreenZoneParser.Lexer.TokenRule" id="33554436"/>
		<constr id="100664303" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
		</constr>
		<method n="TReset" id="100664304" rt="v" mod="oi">
		</method>
		<method n="TApply" id="100664305" rt="v" mod="oi">
			<param t="c" n="ch">
			</param>
			<param t="c" n="next_ch">
			</param>
		</method>
	</type>
	<type n="TReflInterfaceType" ns="GreenZoneParser.Reflect" id="33554625" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflObjType" id="33554495"/>
		<constr id="100664306" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="X" n="namespaceId">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<constr id="100664307" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="X" n="typeName">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
		</constr>
		<method n="TApplyGenericArgs" id="100664309" rt="TGreenZoneParser.Reflect.ReflCallableType" mod="oi">
			<param t="TGreenZoneParser.Reflect.ReflDefType" n="parentType">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflTypeArg;" n="genericTypeArgs">
			</param>
		</method>
		<prop n="TypeId" id="385876399" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
	</type>
	<type n="TReflIndexerGet" ns="GreenZoneParser.Reflect" id="33554626" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflMethodBase" id="33554466"/>
		<field n="parent" id="67109929" t="TGreenZoneParser.Reflect.ReflIndexerProperty" mod="r0">
		</field>
		<constr id="100664310" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="X" n="id">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflObjType" n="declaringType">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflIndexerProperty" n="parent">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflModifier" n="modifiers">
			</param>
			<param t="A1TGreenZoneParser.Reflect.ReflAttribute;" n="attributes">
			</param>
		</constr>
		<prop n="TypeId" id="385876400" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="Parent" id="385876401" t="TGreenZoneParser.Reflect.ReflIndexerProperty" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TReflAttribute" ns="GreenZoneParser.Reflect" id="33554627" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Reflect.ReflBaseNode" id="33554463"/>
		<field n="declaringType" id="67109930" t="TGreenZoneParser.Reflect.ReflClassType" mod="r0">
		</field>
		<field n="attributeConstrId" id="67109931" t="X" mod="r0">
		</field>
		<field n="attributeConstr" id="67109932" t="TGreenZoneParser.Reflect.ReflConstructor" mod="0">
		</field>
		<field n="args" id="67109933" t="G1TGreenZoneParser.Reflect.ReflAttributeArg;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="argsUm" id="67109934" t="G1TGreenZoneParser.Reflect.ReflAttributeArg;System.Collections.Generic.IList" mod="r0">
		</field>
		<field n="namedArgs" id="67109935" t="G1TGreenZoneParser.Reflect.ReflAttributeArg;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="namedArgsUm" id="67109936" t="G1TGreenZoneParser.Reflect.ReflAttributeArg;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100664313" mod="i">
			<param t="TGreenZoneParser.Parser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.BaseNode" n="parseNode">
			</param>
			<param t="TGreenZoneParser.Reflect.ReflClassType" n="declaringType">
			</param>
			<param t="X" n="attributeConstrId">
			</param>
		</constr>
		<method n="TAddArg" id="100664320" rt="v" mod="i">
			<param t="TGreenZoneParser.Reflect.ReflAttributeArg" n="arg">
			</param>
		</method>
		<method n="TAddNamedArg" id="100664321" rt="v" mod="i">
			<param t="TGreenZoneParser.Reflect.ReflAttributeArg" n="arg">
			</param>
		</method>
		<prop n="TypeId" id="385876402" t="TGreenZoneParser.Reflect.ReflTypeId" r="True" w="False" mod="oP">
		</prop>
		<prop n="DeclaringType" id="385876403" t="TGreenZoneParser.Reflect.ReflClassType" r="True" w="False" mod="P">
		</prop>
		<prop n="AttributeConstrId" id="385876404" t="X" r="True" w="False" mod="P">
		</prop>
		<prop n="AttributeConstr" id="385876405" t="TGreenZoneParser.Reflect.ReflConstructor" r="True" w="False" mod="P">
		</prop>
		<prop n="Args" id="385876406" t="G1TGreenZoneParser.Reflect.ReflAttributeArg;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
		<prop n="NamedArgs" id="385876407" t="G1TGreenZoneParser.Reflect.ReflAttributeArg;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TWhileStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554628" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100664322" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TSwitchStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554629" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100664323" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TFinallyStatementNode" ns="GreenZoneParser.Parsers.Cs" id="33554630" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.StatementNode" id="33554449"/>
		<constr id="100664324" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
	</type>
	<type n="TTernaryOperationNode" ns="GreenZoneParser.Parsers.Cs" id="33554631" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="operatorToken1" id="67109937" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="operatorToken2" id="67109938" t="TGreenZoneParser.Lexer.Token" mod="r0">
		</field>
		<field n="left" id="67109939" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<field n="middle" id="67109940" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<field n="right" id="67109941" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<constr id="100664325" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="operatorToken1">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="operatorToken2">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="left">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="middle">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="right">
			</param>
		</constr>
		<prop n="OperatorToken1" id="385876408" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="OperatorToken2" id="385876409" t="TGreenZoneParser.Lexer.Token" r="True" w="False" mod="P">
		</prop>
		<prop n="Left" id="385876410" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="Middle" id="385876411" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="Right" id="385876412" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TArrayAccessExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554632" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.ExpressionNode" id="33554455"/>
		<field n="left" id="67109942" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<field n="brackets" id="67109943" t="TGreenZoneParser.Lexer.TokenOpenClose" mod="r0">
		</field>
		<field n="parameterList" id="67109944" t="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="parameterListUm" id="67109945" t="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100664331" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="left">
			</param>
			<param t="TGreenZoneParser.Lexer.TokenOpenClose" n="brackets">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.List" n="parameterList">
			</param>
		</constr>
		<prop n="Left" id="385876413" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="Brackets" id="385876414" t="TGreenZoneParser.Lexer.TokenOpenClose" r="True" w="False" mod="P">
		</prop>
		<prop n="ParameterList" id="385876415" t="G1TGreenZoneParser.Parsers.Cs.ExpressionNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
	<type n="TLinqFromExpressionNode" ns="GreenZoneParser.Parsers.Cs" id="33554633" mod="P" t="cl">
		<base-t n="TGreenZoneParser.Parsers.Cs.LinqHeadExpressionNode" id="33554578"/>
		<field n="typeSpecifier" id="67109946" t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" mod="r0">
		</field>
		<field n="identifier" id="67109947" t="TGreenZoneParser.Parsers.Cs.AtomicExpressionNode" mod="r0">
		</field>
		<field n="inExpression" id="67109948" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" mod="r0">
		</field>
		<field n="joins" id="67109949" t="G1TGreenZoneParser.Parsers.Cs.LinqJoinExpressionNode;System.Collections.Generic.List" mod="r0">
		</field>
		<field n="joinsUm" id="67109950" t="G1TGreenZoneParser.Parsers.Cs.LinqJoinExpressionNode;System.Collections.Generic.IList" mod="r0">
		</field>
		<constr id="100664335" mod="P">
			<param t="TGreenZoneParser.CsParser" n="parser">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="parent">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="startToken">
			</param>
			<param t="TGreenZoneParser.Lexer.Token" n="endToken">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" n="typeSpecifier">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.AtomicExpressionNode" n="identifier">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.ExpressionNode" n="inExpression">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.LinqJoinExpressionNode;System.Collections.Generic.List" n="joins">
			</param>
			<param t="b" n="includesSemicolon">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.AttributeNode;System.Collections.Generic.List" n="attributes">
			</param>
			<param t="G1TGreenZoneParser.Parsers.Cs.ModifierNode;System.Collections.Generic.List" n="modifiers">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.BlockNode" n="subStatementsBlock">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementNode" n="tailStatement">
			</param>
			<param t="TGreenZoneParser.Parsers.Cs.StatementParseMode" n="parseMode">
			</param>
		</constr>
		<prop n="TypeSpecifier" id="385876416" t="TGreenZoneParser.Parsers.Cs.TypeSpecifierNode" r="True" w="False" mod="P">
		</prop>
		<prop n="Identifier" id="385876417" t="TGreenZoneParser.Parsers.Cs.AtomicExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="InExpression" id="385876418" t="TGreenZoneParser.Parsers.Cs.ExpressionNode" r="True" w="False" mod="P">
		</prop>
		<prop n="Joins" id="385876419" t="G1TGreenZoneParser.Parsers.Cs.LinqJoinExpressionNode;System.Collections.Generic.IList" r="True" w="False" mod="P">
		</prop>
	</type>
</assembly>
